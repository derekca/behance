%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (Tom Nakat) (HAAK & NAKAT)%%Title: (wort+bild_s.eps)%%CreationDate: (3/2/00) (7:08 PM)%%BoundingBox: 223 361 373 482%%HiResBoundingBox: 223.0186 361.4414 372.8887 481.0356%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Black&White%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 298 421 298 421%AI3_TileBox: 249 -312 787 469%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 155.9055 155.9055%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 127.8184 512.6362 5.5 1905 1029 18 0 0 7 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:249 -312%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 104 8%%BeginData: 12318 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD37FF7D7D2752FD09F827275252A8A8FD68FFA87D2727F8F8F827%2752527D527D7D7D527D2727FD05F8527DFD63FF7D27F8F827277DA8FD10%FFA87D52F8F8F8527DFD5DFFA827F8F82752A8FD18FF7D52F8F8F852A8FD%58FFA852F8F827A8FD1EFF7D52F8F852FD55FFA827F8F852A8FD0AFFA87D%7D52FD06277D527D7DFD0AFFA827F8F852A8FD51FF7DF8F852FD09FF7D52%27FD05F8272727522727FD05F827527DA8FD07FFA852F82752FD4EFFA827%F827A8FD07FF7D52F8F8F82752A87DFD05FF7DA8FFFFFFA87D5227F8F8F8%277DA8FD06FFA827F8F8A8FD4BFF7DF8F87DFD06FFA852F8F8F87D7DFFFF%FFA827FD05FF5252FD05FF52A8FFA85227F82752FD07FF7D27F87DFD49FF%27F827A8FD06FF52F8F8527D7DA8FD05FFF8FD05FF277DFD04FFA8F8A8FD%04FFA827F8F852A8FD05FFA827F852A8FD46FF27F852FD06FF52F8F852FF%FFFF2752FD05FF27A8FD04FF277DFD04FF7D27FD04FFA8F8FFA852F8F852%FD06FF7DF827A8FD43FFA8F8F87DFD05FF7DF8F852A8FD04FFA8F8A8FD04%FF277DFD04FFF8A8FD04FFF87DFD04FF2752FFFFA827F8A8FD07FF7DF8F8%A8FD41FFA8F827A8FD05FF27F827A852FD06FF5252FD04FFA87DFD04FFA8%FD04FFA827FD04FF2727FFFFFF27F8A8FD09FFA8F827A8FD3FFFA8F8F8A8%FD04FFA8F8F852FFA827F8FD05FF7DF8A8FF7D5227FD0AF85227FFFFFF52%F8A8FFFF52F87DFD0BFFA8F8F8A8FD3DFFA8F827A8FD04FF7DF827A8FD04%FF2752FD05FF7D27FD05F827275227522752F827FD04F8277DA8FFFF52F8%7DFD0DFFA8F827A8FD3CFFF8F8A8FD04FF7DF827A8FD05FFA8F852FF7D27%F8F8F827277DFD0CFF7D52FD05F87DF852FD0FFFA8F827A8FD3AFF27F87D%FD04FF52F8277DFD07FFA8A827F8F82752FFFFFF7D522727FD07F852527D%A8FFFF52F8F8F827FD11FFA8F827FD39FF52F852FD04FF52F852FF52F87D%FD05FF52F8F8F87DFFFF5227F8F8F827277D527D527D525227FD04F852A8%A8F8F87DFD12FF7DF852FD37FF7DF827FD04FF7DF852FFFFFFA8F827A8FF%7D27F8F852FFA827F8F8277DA8FD0CFFA87D27F8F8F852F8FD14FF52F8A8%FD35FFA8F8F8FD04FF7DF827A8FD05FF275252F8F852FFA827F8F852A8FD%12FF7DF8FF277DFD14FFA827F8FD35FF52F8A8FD04FFF827FD08FF27F8F8%FFFF52F82752FD13FF52A8F8FFFF27F852F82727FFFFA8FD0EFFA8F827FD%33FFA8F852FD04FF27F87DFD07FFF8F8F8FFA827F852A8FD12FF7DF82727%7DFF27F87DA8FF277D52F8F852FD0EFF52F87DFD32FFF827A8FFFFFF52F8%7D7DF8527DFFFFFF27F8F8FF7DF8F8A8FD13FFA827FF5227FF27F8FFFFFF%2727F8F8F87DF8FD0FFFF827FD31FF7DF87DFFFFFFA8F827FFFFA85227F8%7DF8F8F8FF52F827A8FD12FFA8FFF8FFFF27F827F87D5252F87D52F827FF%A8F8A8FD0EFF7DF87DFD30FF2727FD04FF52F8FD06FFA852F827FF52F827%FD13FF52F87D7DFF7DF827F827F827A8FF7DF87DFFFF5227FD10FF27F8FD%2FFF7DF87DFFFFFF7DF87DFD06FF7DF8F8FF7DF827FD13FF27525227A8A8%F8527DFFA8277DFF52F87DFFFFFF7DF8A8FD0FFF7DF87DFD2EFFF827FD04%FFF827FD06FFA8F8F8FF7DF827FD13FF5252FF52F8A8F87DFFFF7D277DFF%5227A8FD05FF7D27FD10FFF827FD2DFF7DF87DFFFFFF7DF852A8FD05FF27%F87DA8F8F8FD12FFA8A827A8FFF8F8F8527D52F852A8FF2727A8FD07FF52%52FD0FFF7DF87DFD2CFF52F8FD04FF27F8A8F8F8F85252A8F827FF52F8FD%12FF7DF87D7DFF5252F827F82727FFFFFF5227FD0AFF52A8FD0FFF2727FD%2CFFF852FFFFFFA8F87DFFFFA8A87D7DF8F87D7DF87DFD11FF7D2752F8A8%A8F8F8A8FFFF277DFFFF2727A8FD09FFA85252FD0FFF52F8A8FD2AFF7DF8%A8FFFFFF2727FD06FF52F827FFF827FD11FFA827FF52277DF827FFFFFF27%52FFFF5227A8FD07FF7D7D27F8F8A8FD0FFFA8F87DFD2AFF52F8FFFFFFA8%F827FD06FFF8F8FF52F87DFD11FF27A8FF52F8F8F8FF7D52F87DFFFF52F8%A8FD05FF7D52FD06F852FD10FF2727FD2AFFF852FFFFFF7DF8A8FD05FFA8%F852FF2727FD10FF5252F8FFFF277D2727F8277DFFFFFF7D27A8FD04FF7D%F8F82727F8A87DF8F87DFD10FF52F8FD29FF7DF87DFFFFFF27F8FD06FF27%F87D7DF8A8FD0FFF52272727FF2727277D7D7DF8FFFFFFA8F87DFFFFFF52%F8F852A8FFF82727F852F87DFD10FFA8F8A8FD28FF7DF8FD04FF27527D52%5227277DF8F8FFF827FD0FFF7D27FFF8527DF87DFFFFFF27A8FFFFA8277D%FFFFA827F8F87DFFFF5227277DA8FF527DFD10FFA8F852FD28FF2727FFFF%FFA8F87D525252A87D7DF852A8F852FD0FFFF8FFFFF8F8F852FFFFA8F87D%FFFFA82752FFFF7DF8F827F8277D27F87DFD04FFA8F8FD11FFF827FD28FF%2752FFFFFF7DF8A8FD05FF27F87D7DF8FD0EFFA8A852FFFF2752277D5227%27A8FFFFFF5252FFFF52F852A8A8F8F8F8277DFD06FF277DFD10FF52F8FD%28FFF87DFFFFFF52F8FD06FFF8F8FF2727FD0DFF7DF85252FF52522727F8%2752FD04FF5227FFFF7DF87DFFFF52F87DFD09FF7D52FD10FF52F8A8FD26%FF7DF8A8FFFFFF2727FD06FFF827FFF852FD0CFFA8F8A8F87DA827F87DA8%FF277DFFFFFFA8F8FFFF7DF87DFFFF7DF87DFD04FFA827F852FFFFFFF8FD%10FFA8F8A8FD26FF7DF8A8FFFFFFF827FD05FF7DF827A8F87DFD0CFF27A8%FF2727F8F8FFFFFF7D27FD04FFF8A8FFA8F852FF7DF8F852FD04FF5227A8%FF7DFFFFFF7DFD10FF7DF87DFD26FF52F8FD04FFF87DFFFFA852F87DF87D%7DF8A8FD0BFFA852FFFFF8F827FFFFFF2752FD04FF277DFFFFF827A87DF8%7DA8FFFFFFA8527DFFFFFF52FFFFFF27FD11FFF87DFD26FF7DF8FFFFFFA8%F85252F8F8527D27F87D7DF8FD0BFF7D7D52FFA827F8525227277DFD04FF%5227FFFF27FD04F827FD04FFA852A8FF7D27F87DFFFFFF5252FD10FFF852%FD26FF52F8FFFFFFA8F8A827A8FFFFFF52F8FF52F8FD0AFF7DF8277DFF7D%277D2727277DFD04FFA827A8FF52F8F827F8F827FD07FF27275227FD04FF%7D27FD10FFF87DFD26FF7DF8FFFFFF7DF87DFD05FF27F8FF7DF8FD09FFA8%27A82752FFF8277DFFFF277DFFFFFFA8277DFFA8F8F8A852277DF8A8FFFF%FFA87DF852A8FF27FD05FFF8A8FD0FFFF852FD26FF52F8FFFFFFA8F8A8FD%05FF52F8FF52F8FD09FF527DFF2727F852FFFFFF7D27FD04FF7D52FFFF27%F8A8FF7D27FF27A8FFFFFF5227FD05F8A8FD04FFA827FD0FFFF87DFD26FF%7DF8FFFFFF7DF87DFD05FF27F8FF7DF8FD09FFF8FFFF52F827FFFFA85227%FD04FFA8F8FFFF7DF8A8FFA8F852FF2752FD07FFA8A8FD06FFA8F8A8FD0E%FFF852FD26FF52F8FFFFFFA8F8A8FFFFFFA82752F8FF52F8FD08FFA827FF%FF27F8527D27277DFD05FFF87DFFA8F852FFFFF852A8FFF87DFD10FF5252%FD0EFFF87DFD26FF52F8FFFFFFA8F852FFA852F87D27F87D52F8FD07FF27%5227FFA8275227F8F8F852FFFF7D52F827FFFFF8F852FF2752FFFFF8F8A8%FD10FFA8F8FD0EFFF852FD26FF52F8FD04FFF87D7D2727FFFF7DF87D7DF8%A8FD05FF7D522727FF7DF8527DFFFF527DFF27277D7D275252F8277DA852%FFFF52F87DFD12FF5252FD0DFFF87DFD26FF7DF8A8FFFFFFF8525252FFFF%FF7DF827A8F8A8FD05FF27A8A8F87DF87DFFFFFF7D27FF52272752277DF8%F8272752FFFFFF7DF852FD0DFF7DA8FD04FFA8F8FD0CFF7DF87DFD26FFA8%F87DFFFFFF2752FD06FFF852FFF852FD04FFA852FFFF52F852FFFFFF7D27%FFFF277D52FFA8527DF87DF87DFFFFFF7DF8FD0EFF52FD06FFF8FD0CFFA8%F8A8FD27FFF852FFFFFF52F8FD06FFF8F8FF2727FD04FF527DFFFF27F852%52272752FFFFFFF8A852FF7D7DA8F8F8F852FFFFFF52F8FD0EFF27FFA852%27FFA852FD0CFF52F8A8FD27FF2752FFFFFF7DF8A8FFFFFFA85227F8FF52%F8FFFFFFA87DA8FFA8527D27F827F852FFFFFFF8A8A8FF7DA8FF27F827F8%27FFFF5227FD0EFF52522752FF7D52A8FD0CFF52F8FD28FF2727FFFFFFA8%F87DFFFFA8275252F8527DF87DFFA8F8F87DFF7DF8277DFFFF7D52FFFFFF%F8A827FF7D52FD04FF7DF8F827F8A8FD0EFFA87D7D5252FD0FFFF827FD28%FF7DF8FD04FF2727FFFF2727FFFFF8F8FFF827FF52A827F8FFF87DFFFFFF%A8F8FD04FF5252527DFD07FFA8A8A8FD12FFA87DFD10FFF852FD28FF7DF8%7DFFFFFF27F8A82727FFFFFFF8F87D7DF87DF8FFA827F827FFFFFFA8F8A8%FD04FF27F87D52A8FD1BFF52A8FD0FFFA8F8A8FD29FFF852FFFFFFA8F8A8%27FD04FF7DF852A8F8277DFFFFF8277DA8522727FD05FFA8F82727FF7D52%A8FD19FFA852FD0FFF52F8FD2AFF52F8FD04FFF827FD06FFF8F8FF52F852%FFFF277D522727F8277DFFFFFFA8277DF8F852A87DFD19FF522752FD0FFF%F827FD2AFF7DF8A8FFFFFF52F8A8FD04FF2752F827FFF87DFFFFF852277D%A8FF527DFD04FF7D27277DF8FFFFFFA8FD15FFA87D7D527DFD0EFFA8F87D%FD2BFFF852FFFFFFA8F852FFFFFF7DF8FFF8F87D52F8FFA8F852FFFFFFA8%27FD04FF52F852FFFF2727A8277DFD14FF7D7DA8FF5252FD0EFF27F8A8FD%2BFF52F8FD04FF52F8FFFFFFF87DFF7DF827FF277D5227FFFFFFA827A8FF%FFA8F827A8FFFFFF2727F8F852FD16FF7D272752FD0EFF2727FD2CFF7DF8%7DFFFFFF7DF852FF7D27FFFFFF27F87D52F8F8FFFFA82727A8FFFFA852A8%FD05FFF87D52F8F87DFD16FFA827FD0EFF7DF87DFD2DFFF827FD04FF2727%A8277DFD04FFF8F8FF27F8F852527DFD0CFF27A8A8F8A8277DFD15FF27A8%FD0EFFF827FD2EFF7DF87DFFFFFFA8F85252FD04FF2752FD05F8A8FD0EFF%2752FFF8A8A8F852FD14FF277DFD0DFF7DF87DFD2FFF2727FD04FF52F8A8%FD04FFF8FF52F8F8A8F827A8FD0DFF5252FF5252FFA82752FD13FF277DFD%0DFF27F8FD30FF7DF87DFFFFFFA8F8F8FFFFFF7D27FFA8F852FFFF27F8A8%FD0CFF7DF8FF7D27FFFFA827F8FD12FF2752FD0CFF7DF87DFD31FFF827FD%04FF7DF852FFFF5252FF52F8A8FFFFFF5227A8FD0CFFF8A8FFF8FD04FF27%F87DFD10FF27A8FD0CFFF827FD32FFA8F852FD04FF27F87DFF277DFF5227%FD05FF2727A8FD0BFFF8A8FF277DFD04FF52F852A8FD0DFF7DF8FD0CFF52%F87DFD33FF52F8A8FD04FFF827A827A8FF2752FD06FFF87DFD0BFF52A8FF%5252FD06FF272752FD0BFF52F87DFD0BFFA8F827FD34FFA8F8F8FD04FFA8%F8277DFFFF2727FD06FF2727FD0BFFF87DFF7D27FD07FF7D27F8527DA8FD%04FF7D52F827A8FD0BFFA827F8FD36FF7DF827FD04FFA8F827FFFF5227FD%06FF2752FFFFFFA8527D52522727F8F8A8FF5252FD09FFA85227FD05F827%52A8FD0DFF52F8A8FD37FF52F852FD04FF7DF827A87DF8FD05FFA8F827FF%52F8F8272752525227527DFFFF5227FD0BFFF8FFA8A8A8FD10FF7DF852FD%39FF27F87DFD04FFA8F827A8F852FD04FF52F8A8FFA8A8FD0BFFF87DFD0A%FFA852FD13FFA8F852FD3BFF27F8A8FD04FF7DFD04F8A8FFA827F8F82752%2727F8F8F8FD04277D5252F8F87DFD0AFF7D52FD12FFA8F827A8FD3BFFA8%F827A8FD04FFA8F8F8F87DFFA8FD07F87D27F8527D5227F8F8277DF852FD%0AFF527DFD11FFA8F827A8FD3DFFA8F8F8A8FD04FFA8F8F8F8A87D277DF8%7DFFF87DFF52F8FFFFFF27F8FFFFFF5227FD0AFF2752FD10FFA8F8F8A8FD%3FFFA8F827A8FD05FF27F8F8A8F827F8FFFFF852FF2727FFFFFFA8F87DFF%FF52F8FD0AFF277DFD0FFFA8F827A8FD41FFA8F8F87DFD05FF7DF827A8F8%F8A8FFF87DFF2727FD04FF52F85252F87DFD0AFF2727FD0EFF7DF8F8A8FD%44FF27F852FD05FFA8A8FFFFF852FFF852FF52F8A8FD04FF7DF8277DFD0B%FF52F8FD0DFF52F827FD47FF27F827A8FD07FF7DF827F852FF7DF87DFD04%FF7DF8A8FD0CFFA8F87DFD0AFFA827F852A8FD48FF7DF8F87DFD08FF7D27%F87DA8F8F8FFFFFF7DF8F8FFFFFFFD04A87D7D52A8A8FFFF2727FD09FF7D%27F87DFD4BFFA827F827A8FD08FFA8FD0AF827FD0CF827F8F87DFD06FFA8%27F8F8A8FD4EFF7DF8F852FD0DFF7DA8FD0EFF7DA87D7D52FD05FFA852F8%2752FD51FFA827F8F852A8FD22FFA827F8F852A8FD54FFA852F8F827A8FD%1EFF7D52F8F852FD59FFA827F8F8F827A8FD18FF7D52F8F8F852A8FD5CFF%A87D27F8F827277D7DFD0FFFA8A85252F8F8F8527DFD62FFA87D2727F8F8%F8272752527D5252527D52522727FD05F8527DFD6AFF7D7D2752FD09F827%275252A8A8FDFCFFFDFCFFFDBEFFA8A8A87DA8A8A87DA8A8A87DA8A8A87D%A8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8%A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D%A8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8%A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DFD80FFA8A8FFFFA8%A8FFFFFFA8FFFFFFA8A8FFA8A8FD05FFA8A8A8FFFFFFA8A8FD09FFA8A8FF%A8FFFFFFA8A8A8FFFFA8A8FFA8FD07FFA8FFA8FFFFFD04A8FFFFFFA8FFFF%FFFD04A8FFFFA8A8FFFFFFA8A8FD04FFA8A8FFFFFFA8A8A8FFFFA8A8FFA8%A8FD08FFA8A8A8FFFFFD04A827F8FF52F8FFFFFFA827FFFFFF7DF8A8F8A8%FD05FF5227A827FFA8F8A8FD04FF7D27FFFFFF27F8A852A8FFA8277DF87D%FF27527D52A8FD05FF525252F8FFFF275252F8FFFF277D27FFA827525227%FFA8F8A8FFFFFF277DFFFFFF5252277DFF7D2752F8FFFF277DA82752FFFF%FF277DFFFFA827525252A8F85227F87DF8A852F8FFFFFF7DF8A8FFFFFF52%277DFD06FF527DFFF8FFFFF8FD05FF2727FFFFFF7D525252FFFF5252FFA8%FFFF7D277DFD06FFA8F8FFFF7DFFFF7D527DA8FFA8277DA8FFFF277D7DA8%FFFFF8FD04FF52A8FFFFFF277DA8FFFF277DFF7DFFFF52A8FF27A8FFFFA8%2752FFFFFF277D7DA8A8A8527D7D5252277DF8FFFFFF275252FFFFFFA8F8%7DFD06FF7D27527DFFFFF8FD04FFA852F87DFFFF52FFF827FFFF27A8FD04%FF52F827FD06FFA8F8FD05FF52F827FFFFFF52F8F8FFFF27F852FFFFFFF8%FD04FF27A8FFFFFFA827F87DFFF8A8FD04FF277D7D277DFFFF7D52F8FFFF%FF27F852FFFFFF5252FF7D7DF8A8F8FFFFA87D7D27FFFFFF7D5227FFFF7D%527DFF527DFD04FFF8FFFFA8FF7D7D5252FFFF7DFF7DF8FFFF527DFFA8FF%FF7D52277DFFFF5227A8A8F8FF7DF87DFF7D52A8A8FFA8FFFF52A8FF277D%A8A8FFFFF8FFFFA8FF52A8FFA8FF7DFF7D7DFF27A8FF7DFFFF52A8FF27A8%FFFF52A827A8FFFF277DA8FFFFFF527DFF52A8F8A8F8A8A852A8A8F8A8FF%7D27FFF87DFD05FF5252FFFFFFA8F87D2752A827FF7D27A8FF52A8FF27FF%FF7D2752F87DFF52527DF87DFD05FF277D7D27FFFF52527D27A8A8F87DF8%FFA827527D27FFA8F87D5252FFF87D5227FFF852277DFF7D5252F87DFFF8%7DA82752FFA852FF5252FFA8277DFFFFFFA85227FFA8A8FFA8A8A8FF7DFF%A8A8A8FFFD05A8FD05FF7DA8FFFFFFA8A8A87DFFFD05A8FFFFA8A8FFA8FF%FFFFA8A8FFFFFFA8A8FF7DA8FD06FFA8A8FFFFFD04A87DFFFFFF7DFFFFFF%7DA8A8A8FFA8A8A87DFFFFA87DA8A8FFA8A8A8FFFFFFA8A8A8FFFFA87DFF%A8A8FFA8A8FF7DA8FFFF7DA8FD04FFA8A8FD80FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k([Passermarken]) Pc([Passermarken]) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Ebene 1) Ln0 Au*u0 O0 0 0 1 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR247.3174 428.9438 m247.3174 456.8643 270.0313 479.5801 297.9541 479.5801 c325.874 479.5801 348.5898 456.8643 348.5898 428.9438 c348.5898 401.021 325.874 378.3047 297.9541 378.3047 c270.0313 378.3047 247.3174 401.021 247.3174 428.9438 cf1 D245.8594 428.9438 m245.8594 400.2183 269.2275 376.8496 297.9541 376.8496 c326.6787 376.8496 350.0479 400.2183 350.0479 428.9438 c350.0479 457.6665 326.6787 481.0356 297.9541 481.0356 c269.2275 481.0356 245.8594 457.6665 245.8594 428.9438 cf*Uu*u0 D332.1797 420.4702 m330.7617 419.1509 328.7529 419.1294 327.126 418.0591 C326.3789 417.313 326.5684 416.4648 326.873 415.5254 C327.4746 414.335 327.2471 414.458 326.4063 414.1777 c324.4424 413.5234 324.4648 411.3755 322.1025 411.7358 C321.9688 411.6958 321.416 411.9717 321.7422 411.5757 c321.9971 411.2734 322.1025 411.4556 322.6035 411.3955 C323.4443 411.3555 323.7578 411.7021 324.3486 412.1035 C325.1914 412.8125 325.0908 413.0791 326.126 413.5771 C326.375 413.6357 326.9863 413.8174 327.3271 413.6973 C327.5576 413.4858 327.5635 413.48 327.6006 413.2905 C327.4668 412.7148 326.627 412.2363 326.3066 412.0361 C326.748 411.7124 327.5742 411.166 327.4404 410.708 C327.251 410.4072 327.2607 410.3569 326.9268 410.1943 c326.46 409.9678 325.5254 410.002 324.6445 410.6548 C324.5107 410.6143 324.3643 410.915 323.9873 410.5571 C324.8447 409.6743 326.0459 409.8745 326.2266 409.6943 c326.4063 409.5142 325.585 408.4482 325.5479 408.2188 C324.9717 406.688 325.6787 405.2783 325.3701 403.6885 C325.1807 402.4448 324.8086 401.853 323.7197 401.0693 C321.7227 399.686 320.3213 399.2856 318.0801 398.9253 C312.2012 398.5239 308.4922 400.541 304.2598 403.7021 c300.0273 406.8633 298.4082 408.5449 297.0869 410.3242 C297.0674 411.0522 297.6025 411.6055 297.1455 412.3926 C296.7627 412.2588 296.8008 411.7612 296.5703 411.4722 C296.2441 411.0117 295.46 410.6694 294.9033 410.7256 C293.1621 411.3193 293.0654 413.3667 291.9766 414.5356 C289.6406 416.834 288.9873 420.146 290.2344 422.9209 C290.6729 423.7827 291.457 424.6064 292.3398 424.9116 C293.4287 425.0854 294.7139 425.0854 295.4229 424.0313 C296.2627 423.2285 296.7822 421.9258 296.9902 420.7778 C297.3359 420.2212 296.915 419.5898 297.4883 419.1294 C298.4834 419.0361 299.3447 418.7871 300.3027 419.397 C301.0117 419.3037 301.1084 418.5166 301.6436 418.1743 C302.6016 417.5991 L303.6152 417.1792 304.918 417.1792 305.7803 417.9258 C307.3877 419.5713 307.0371 421.2646 307.5908 423.0815 C309.124 424.4404 310.1436 426.3857 310.125 428.2832 C310.0283 429.4497 309.6084 430.6563 308.918 431.8228 C309.0332 432.5132 309.416 433.0293 309.6455 433.6426 C309.8389 433.7573 310.0879 433.7573 310.2959 433.7949 c312.001 434.1587 313.5527 435.7104 314.2217 437.3374 C314.374 437.4897 L316.3271 437.6235 318.7588 438.314 319.8887 440.3633 C320.1182 441.2437 321.1133 440.5938 321.7266 440.8022 C322.7588 440.8608 323.7949 441.4336 324.5791 442.105 C324.8086 442.1826 324.9795 441.9312 325.1162 441.8188 C325.5742 440.2856 326.417 438.8115 326.8955 437.2598 C327.4893 436.0928 327.7012 434.9829 327.4893 433.7949 C327.7383 431.978 328.7715 430.2739 329.499 428.4355 c330.2275 426.501 331.3564 424.5479 332.1797 422.5571 C332.333 421.7544 332.6777 421.1201 332.1797 420.4702 Cf1 D332.5791 423.812 m331.2012 426.9907 329.6514 429.7275 328.5195 432.9253 C327.7168 434.0732 328.1777 435.2983 328.0811 436.5239 C327.5645 438.4395 326.7588 439.9141 325.9941 441.7705 c325.7822 442.3057 326.377 442.4609 326.5879 442.8408 C326.9326 443.7803 326.6846 444.8345 326.2617 445.7334 C326.0908 446.2495 326.7031 446.6138 326.5879 447.1489 C326.5664 447.9727 325.8418 448.5293 325.2666 448.9683 C324.4043 450.2124 324.0039 450.8652 322.9307 451.9941 C322.9307 452.2056 L323.4658 452.6821 323.9072 453.5059 323.8887 454.2148 C323.6768 455.0176 323.5059 455.7642 322.7373 456.3208 C321.5146 457.0107 320.2705 455.938 319.2949 455.3818 C319.0244 455.1919 318.8906 454.999 318.5078 455.0366 C318.2598 455.125 318.0029 455.2168 317.7422 455.3105 C317.4922 455.0254 317.1826 454.7231 316.8018 454.4219 C317.9912 453.9395 L318.0342 453.9072 318.0498 453.8833 318.0498 453.8433 c318.0498 453.8218 318.042 453.7842 318.0371 453.752 C317.9541 453.6802 315.2832 451.3389 Y315.2754 451.3335 310.4707 446.5845 Y310.4707 446.5815 309.0918 445.1846 Y309.084 445.1768 304.8135 440.2563 Y302.5801 437.666 299.2803 433.4146 297.2949 430.3032 C296.2627 428.8794 295.2324 427.2983 294.2715 425.8027 c294.168 425.6367 293.9717 425.6499 293.6621 425.6875 c293.4502 425.7114 293.2334 425.7334 293.0381 425.6665 C293.0439 425.6665 293.0469 425.6665 Y293.0039 425.6553 L293.0146 425.6582 293.0273 425.6611 293.0381 425.6665 C291.9521 425.5459 291.1631 425.1846 290.3174 424.4194 C289.2207 423.127 288.6689 421.5615 288.6689 419.8735 c288.6689 418.7124 288.9336 417.4893 289.4668 416.2612 C289.2422 415.603 288.7256 415.0225 288.2627 414.5088 C288.0059 414.2197 L287.6768 413.896 L287.4629 413.6924 287.2188 413.4629 287.042 413.2378 C287.0264 413.2168 L287.0156 413.1895 L286.9941 413.1177 286.9834 412.981 287.1953 412.8794 C287.2451 412.8525 L287.3018 412.8662 L288.3135 413.1069 288.9502 413.8667 289.5684 414.6025 C289.9561 415.0493 290.0127 415.1162 V290.1035 415.1323 290.1787 415.0815 290.3125 414.9688 c290.3818 414.9102 290.4619 414.854 290.5527 414.811 C290.5527 414.79 290.5527 414.7603 Y290.5391 414.4336 290.5371 414.3589 V288.1416 411.9937 286.1914 410.6587 283.6416 409.1602 C283.2158 408.9111 L283.708 408.8604 L284.7041 408.7617 285.6484 409.3208 286.5605 409.8613 C287.6582 410.4658 L288.6719 410.9854 289.6113 411.7769 290.5234 412.5425 C291.3477 413.2271 291.4355 413.2993 V291.5215 413.2861 291.6172 413.1763 291.6924 413.0879 C291.7461 413.0293 291.7813 412.9917 V291.7969 412.9624 292.5459 411.48 292.5918 411.3916 C292.4199 410.688 292.3457 409.9844 292.3457 409.2808 c292.3457 407.7476 292.6777 406.2227 293.0039 404.7295 c293.3242 403.2578 293.6563 401.7378 293.6563 400.2451 c293.6563 400.146 293.6543 400.0498 293.6514 399.9507 c293.6514 399.4907 293.1455 398.8779 292.7256 398.6855 C291.7676 398.522 290.6113 398.5112 289.3857 398.5005 c287.8857 398.4873 286.3311 398.4736 285.1377 398.1504 C284.752 398.1045 284.3076 397.979 283.877 397.8584 c283.4541 397.7407 283.0186 397.6177 282.6113 397.5615 C282.5713 397.5562 L282.5254 397.521 L282.3789 397.4194 L282.2422 397.334 282.0742 397.23 282.0332 397.0288 c282.0313 397.0132 282.0283 396.9941 282.0283 396.9756 c282.0283 396.8604 282.082 396.7349 282.167 396.6465 c282.25 396.5605 282.3545 396.521 282.4619 396.5313 C282.8232 396.5313 283.2266 396.6782 283.6201 396.8203 c283.8936 396.9189 284.1797 397.0239 284.4414 397.0688 c286.9355 397.4946 289.6699 397.4092 291.5215 397.2593 C292.4365 397.2749 293.9375 397.3047 294.4775 398.6025 C294.6729 399.1294 294.7402 399.6191 294.7402 400.0898 c294.7402 400.6089 294.6602 401.1094 294.5771 401.623 C294.4141 402.8857 L294.3037 403.6563 294.1406 404.4243 293.9824 405.1685 c293.7021 406.4902 293.4131 407.8491 293.4131 409.2246 c293.4131 409.5029 293.4287 409.7837 293.4531 410.0645 C293.4795 410.0996 293.5088 410.1421 293.5439 410.1475 c293.625 410.1582 293.7666 410.0459 293.8789 409.9575 c294.0068 409.856 294.1377 409.7593 294.2822 409.7222 C294.4482 409.5967 294.6357 409.5615 294.8066 409.54 c295.0449 409.5078 295.1738 409.4785 295.249 409.2939 C295.3555 408.0845 295.7734 406.835 296.1768 405.626 c296.4551 404.7935 296.7441 403.9321 296.9287 403.0918 c297.2578 401.6206 297.5898 400.1274 297.5898 398.6558 c297.5898 397.7808 297.4717 396.9116 297.1641 396.0581 C296.5244 394.8936 295.125 394.8887 293.7744 394.8833 C293.3701 394.8833 L290.0576 395.084 L287.2158 395.29 284.2783 395.501 281.2656 395.0142 c281.2871 395.0171 280.5918 394.9419 Y280.2197 394.8857 279.8691 394.8403 279.4922 394.9287 C279.3525 395.041 279.2402 395.2363 279.2402 395.4395 c279.2402 395.5039 279.251 395.5708 279.2773 395.6353 c279.8154 396.8228 280.0859 397.896 280.0859 398.8457 c280.0859 399.6162 279.9092 400.3042 279.5557 400.9087 C278.7773 402.4019 277.9209 403.437 276.8643 404.1597 C275.5713 405.4541 274.4648 406.6011 273.4824 407.7188 C272.9072 407.791 272.5537 407.9048 272.5156 407.917 C272.3877 407.9609 L271.8125 407.2524 L272.5596 406.5435 273.249 405.8345 274.0918 405.0693 C275.374 404.3789 276.4092 403.1348 277.3271 402.292 C278.4375 400.9917 278.7051 399.6133 278.4746 398.0806 C278.3223 396.2637 276.6582 395.4771 275.5264 394.2705 C275.0693 393.4087 274.7803 392.376 275.4111 391.5708 C275.8154 390.5005 277.5361 390.6934 277.7471 389.8101 c278.2207 387.8652 281.5947 386.7412 282.2529 386.6958 c282.9082 386.6504 283.5879 385.9253 Y284.9287 384.9487 286.6895 385.1841 287.6152 385.3257 c288.5381 385.4648 290.1914 384.7188 291.2266 384.8711 C292.7764 385.4839 294.042 385.1973 295.6494 385.3311 C300.7041 385.2534 306.4463 385.3687 311.6152 384.7188 C312.5732 384.8335 313.7207 384.0869 314.623 384.5444 C314.8525 384.9297 314.6787 385.2534 314.623 385.5801 C312.1533 389.4648 311.7832 393.8262 313.1836 398.0591 C314.1162 398.0049 L317.4688 397.6406 320.5186 398.0747 323.9238 400.0464 c325.6289 400.9854 326.5244 403.1807 326.4463 404.77 c326.3906 405.8027 326.0322 407.0225 326.2051 408.1143 C326.2656 408.6016 326.5879 409.3413 327.0068 409.5742 c327.1865 409.6743 327.8145 410.1001 328.0117 410.645 c328.335 411.5308 327.6406 411.9492 327.4404 412.0693 C327.9814 412.2896 328.5059 413.396 328.0078 414.2578 C327.6875 414.5981 327.3154 415.9429 327.2754 416.3843 C327.1611 417.0161 327.1416 417.666 327.7363 418.0703 C329.0762 418.7764 330.3389 418.9502 331.7363 419.563 c332.6943 419.9644 333.1914 420.9595 333.1543 421.8589 C332.5791 423.812 Lf0 D277.8467 392.2451 m277.6748 391.9375 277.6992 391.7314 277.6211 391.3618 C277.5283 391.1934 277.0488 391.4209 276.8965 391.5146 C276.3027 391.8359 276.3428 391.6724 276.1709 392.2236 C276.0752 392.5928 276.0859 393.0264 276.6982 393.3472 c277.0811 393.564 277.8467 393.8237 278.0947 393.3472 C278.1729 393.0264 277.79 392.6118 277.8467 392.2451 Cf281.1133 388.1084 m280.3291 388.0898 279.7783 388.5176 279.4141 389.4434 C279.0479 390.6211 278.9248 391.6616 279.1787 392.8735 C279.2588 393.0264 279.4326 393.125 279.5449 393.0747 C280.6396 393.4463 L281.0068 393.5962 281.3057 393.647 281.6563 393.564 C281.8789 393.3447 L281.8623 392.7051 281.7041 392.2344 281.6885 391.6431 c281.624 390.1606 281.499 389.7188 281.9268 388.3066 C281.7686 387.9346 281.4531 388.1138 281.1133 388.1084 cf326.1035 443.1782 m325.9961 443.0659 325.8623 442.9268 325.6836 442.9746 C325.2773 443.2583 325.4316 443.6196 325.4561 443.9624 C325.5391 444.0449 325.5527 444.0933 325.6836 444.0933 C325.876 444.1255 325.9834 443.9834 326.0557 443.8818 C326.1758 443.6597 326.1895 443.4082 326.1035 443.1782 Cf295.0371 425.2485 m297.7178 430.0542 300.9746 434.228 304.458 438.5171 C309.3408 444.0664 L312.8242 447.7827 316.6729 451.5928 320.9424 454.5386 C321.4775 454.8467 321.7129 455.4751 322.2666 455.0337 C322.7695 454.5708 L323.1074 454.188 322.8125 453.1021 322.4678 452.7969 C322.1924 452.5723 321.9248 452.3501 321.6592 452.1309 C322.4922 451.3066 323.6924 449.7388 324.6807 448.7246 c325.1143 448.2778 324.9795 447.8149 325.7559 447.4536 c326.1445 447.2715 326.2539 446.8491 326.0234 446.4854 C325.3359 445.605 324.1875 445.7388 323.2861 445.5088 c319.9365 444.7622 317.2285 443.8042 313.5234 442.0063 C310.5557 440.4355 308.1826 438.6938 306.0361 435.9941 c305.2148 434.98 304.2949 434.2124 303.6074 432.9893 C301.6543 430.4795 300.1025 428.125 298.5498 425.5405 C297.9961 424.7271 297.8145 424.3232 297.0381 423.5869 c296.6611 423.2285 296.3242 423.9775 296.0889 424.2373 c296.0615 424.2666 296.0459 424.2988 296.0273 424.3281 C295.9463 424.3179 295.8643 424.3335 295.7842 424.3872 C295.5752 424.6548 294.9219 424.77 295.0371 425.2485 Cf324.5684 443.8125 m324.5166 442.8838 323.2783 442.1162 322.2432 441.8296 C321.8018 441.7603 321.3945 441.7866 321.0039 441.7866 C320.9023 441.8589 320.7852 441.9448 320.8008 442.0439 c320.8672 442.4854 320.9375 442.7422 320.9697 443.1406 C321.2256 443.3281 L322.1406 443.5122 323.2598 443.7104 324.1777 443.9541 C324.3135 443.9248 324.4824 443.938 324.5684 443.8125 Cf314.9463 441.396 m315.1123 441.6074 L315.8613 441.9634 316.5596 442.2388 317.3916 442.4795 C318.3896 442.7393 L318.6543 442.98 319.1201 443.1753 319.3877 442.8354 C319.4043 441.5435 318.4385 439.9917 317.0098 439.395 c316.5596 439.1997 315.9609 439.1353 315.4277 439.0044 C315.2939 439.1191 314.8604 438.8755 314.7295 439.1997 C314.8125 439.8472 315.0615 440.8154 314.9463 441.396 Cf304.7256 418.4873 m304.458 418.3325 302.1436 419.2153 302.4141 418.9692 C301.8652 419.563 302.7617 419.7637 300.7197 420.5288 C300.2246 420.478 L300.1611 420.4194 299.9814 420.3281 299.7969 420.5825 C299.7783 420.8901 300.1826 420.8447 300.3105 421.2275 C301.041 422.873 300.6396 424.1465 300.5674 425.8506 C301.1084 427.2476 L302.1328 428.4834 302.1299 428.6602 302.8262 429.3315 C303.5215 430.3086 303.666 430.3833 304.5967 431.186 c304.75 431.3169 305.0303 431.4214 305.2129 431.2666 C305.6514 430.9238 305.6758 430.6992 305.8037 430.2603 C306.0234 428.6309 305.0381 427.5151 303.8506 426.6348 C303.0078 425.9072 302.2051 424.7778 302.3867 423.6675 C302.459 423.5923 L302.8447 423.9165 303.3291 424.1064 303.4922 424.5078 C304.1338 425.9419 305.8623 426.5947 306.8311 427.8384 C307.251 428.585 306.9941 429.8804 306.8311 430.7417 C306.8262 430.7178 308.0996 431.3438 307.7539 431.1191 C308.3594 430.8701 308.2842 430.4365 308.5762 429.8833 C309.1436 428.4458 309.0947 427.1484 308.2178 425.9043 C305.8037 422.8945 L305.7666 421.3608 306.1885 419.3867 304.7256 418.4873 cf307.9092 433.0532 m307.3291 432.7861 306.7324 432.7275 306.0898 433.0239 C305.9268 433.2461 305.3965 433.4258 305.6064 433.752 c306.0713 434.5063 306.8604 435.1299 307.3447 435.8711 C307.5693 435.9912 L308.5518 437.1768 310.0986 438.1694 311.5645 439.0605 C312.4502 439.4458 L312.6426 439.6382 313.0947 440.0396 313.2715 439.625 C313.3037 438.0811 312.6504 436.4302 311.1787 435.3384 c310.2852 434.6777 309.9033 434.8062 309.1055 434.7578 C308.6963 434.0166 L308.5996 433.6475 308.2783 433.2754 307.9092 433.0532 Cf299.7861 424.2427 m299.7461 423.1509 L299.6475 422.1558 299.1865 421.0078 298.251 420.4517 C297.6914 420.585 297.8916 421.2568 297.7529 421.7144 C298.1113 422.7095 298.8096 423.5337 299.3877 424.4141 C299.4658 424.4727 299.5459 424.5103 299.626 424.4727 C299.7861 424.2427 Lf286.4561 386.2837 m286.0654 385.8823 285.8467 386.0698 285.4502 386.0322 C284.3242 386.3374 283.6582 386.8267 283.3389 388.103 c282.9268 389.8823 282.9404 391.8384 283.3389 393.6548 C283.5215 393.7969 L284.3135 393.8877 285.5117 394.0483 285.8379 393.8691 c286.1621 393.6895 285.4873 390.4897 Y285.4668 389.8555 285.7773 388.2314 286.0654 387.3887 C286.127 387.2632 286.7744 386.6128 286.4561 386.2837 cf294.6309 388.2607 m294.5098 387.1187 293.0762 386.1123 292.375 385.9092 c291.6709 385.7085 289.5713 385.8076 288.9658 386.0161 c288.3643 386.2246 286.8896 389.104 287.0615 390.5996 C287.0615 391.833 287.3936 393.7915 287.8877 393.9492 c288.3828 394.1045 289.6934 394.0244 Y290.2422 394.0615 290.6572 393.9307 291.1387 393.8745 C291.4814 393.7432 291.2402 393.3125 291.3604 393.0688 C291.5156 392.4321 291.5508 391.7417 291.9463 391.105 C292.498 390.0376 293.5117 389.4009 294.5098 389.0264 C294.7354 388.8203 294.6113 388.542 294.6309 388.2607 Cf293.0195 393.0928 m293.0195 393.3232 293.0332 393.417 293.207 393.4917 C294.1543 393.4917 L294.9941 393.4624 296.0752 393.187 296.8623 394.0005 C297.3145 393.9839 297.3545 393.4463 297.4746 393.0317 C297.582 392.4507 297.5547 392.082 297.5547 391.5601 C297.3672 391.1479 297.1563 390.519 296.7285 390.2568 C296.0488 389.9355 295.3662 389.9976 294.7139 390.2568 C293.7266 390.8403 293.0068 391.7739 293.0195 393.0928 cf312.4043 397.6123 m311.1387 393.2271 310.5371 390.9658 312.5117 386.4473 C312.5303 386.2754 312.7207 385.7163 312.5117 385.6416 C310.3281 386.0801 309.748 386.2676 307.6982 386.4199 C305.8037 386.7466 302.6572 386.2192 300.5518 386.2383 C298.9063 386.1821 297.2393 386.126 295.5156 385.9146 C295 386.1821 295.4004 386.7573 295.4414 387.1396 C295.6309 387.7339 295.6494 388.0391 295.709 388.729 C295.9766 389.0151 296.3027 388.8633 296.627 388.9971 C297.7363 389.168 298.6758 390.1445 298.9434 391.1802 C299.2891 392.269 298.9063 393.4756 298.4082 394.5112 C298.3115 394.8164 297.8916 395.0464 298.0635 395.3511 c299.4229 397.8989 298.4648 400.4834 298.0068 402.9717 C297.5283 404.7349 296.8008 406.6855 296.5117 408.5449 C296.5703 408.7349 296.3213 409.1763 296.7412 409.2139 C296.8965 409.1763 L298.3496 407.4131 302.5156 403.6846 304.0762 402.4736 c305.6357 401.2627 309.665 398.9126 312.2871 398.2813 C312.5361 398.0728 312.498 397.8989 312.4043 397.6123 Cf*UU323.4688 435.7295 m323.7354 435.3843 323.9092 435.0791 323.6982 434.7524 c323.2002 434.7148 323.123 435.3467 322.7031 435.5581 c322.0127 435.9004 321.4004 435.5366 320.7119 435.3652 c318.9707 434.6187 317.5146 433.1255 315.8291 432.3418 c315.6211 432.3418 315.4277 432.3608 315.2939 432.5132 c315.5811 432.7993 316.04 432.8584 316.4043 433.0884 c318.1465 434.2363 319.832 436.0342 322.0127 436.3608 c322.5879 436.3979 323.1045 436.1895 323.4688 435.7295 cf*u1 D323.334 432.7808 m323.2002 433.2031 323.2197 433.8911 322.7031 433.9873 C322.5879 433.7197 322.7031 433.4307 322.5879 433.1821 C322.4355 432.9922 322.168 432.7622 321.8604 432.8394 C319.7539 432.7056 318.1836 430.8462 316.3857 429.8911 c315.7734 429.5459 315.083 429.3535 314.4326 429.1816 C314.374 429.0854 314.3955 428.9517 314.4883 428.8955 C316.4824 428.6841 318.4512 428.4917 320.4258 428.2832 C322.625 428.5317 L322.6846 428.8184 322.3389 429.0669 322.3955 429.3936 C322.6465 430.292 322.7217 431.269 322.4727 432.1118 C322.6465 432.5693 323.2969 432.2266 323.334 432.7808 Cf0 D321.7959 429.3799 m321.5254 428.981 321.0977 429.3291 320.7207 429.2813 C319.8594 429.3799 318.4033 429.1792 317.4531 429.2969 C317.3096 429.3799 317.2021 429.5298 317.29 429.6636 C317.4346 429.8989 317.8311 429.915 318.082 430.0996 C319.123 430.7495 320.2168 431.3682 321.4023 431.6514 C321.6172 431.6836 321.7959 431.5015 321.833 431.3516 c321.9756 430.8008 321.8867 429.915 321.7959 429.3799 Cf*U*u324.4473 422.9111 m324.5176 423.0112 324.5977 423.125 324.6924 423.1343 C324.8174 423.0879 324.8838 423.0288 324.9004 422.7983 C324.8848 422.4287 324.791 422.0405 324.6914 421.6289 c324.5771 421.1606 324.4609 420.6816 324.4609 420.2124 c324.4609 420.0044 324.4844 419.7983 324.54 419.5957 C324.8174 419.251 325.2441 419.1724 325.7568 419.3486 C325.7666 419.353 326.6289 419.8477 Y327.3789 420.2964 328.0879 420.7197 329.4004 421.0542 c329.4326 421.0625 329.4404 421.0522 329.4453 421.0464 c329.4658 421.0225 329.4756 420.9736 329.4756 420.9116 c329.4756 420.7993 329.4424 420.6455 329.3877 420.5205 C329.3379 420.498 328.124 419.9565 Y327.168 419.5386 326.1797 419.1064 325.2539 418.5757 C324.9795 418.52 324.7266 418.6675 324.4824 418.811 C324.4229 418.8462 L324.0703 419.3281 323.957 419.7949 323.957 420.2622 c323.957 420.6812 324.0479 421.1001 324.1426 421.5303 c324.2295 421.9307 324.3184 422.3452 324.3389 422.7798 C324.3691 422.8164 324.4473 422.9111 Yf*U294.6172 423.3032 m295.3076 421.8882 294.5791 420.5479 294.6172 419.0732 c294.7324 418.6533 295.5566 418.5942 295.3076 418.0967 c295.1143 417.9629 294.8467 417.9258 294.6357 418.0781 c294.2529 418.3271 294.1191 418.5166 294.0234 418.9585 c293.9268 420.2588 294.9619 421.7734 294.042 422.9985 c293.7744 423.2661 293.3916 423.5337 293.0088 423.5522 c292.1846 423.3999 291.7646 422.5195 291.4785 421.8696 c291.0371 420.146 290.9219 418.3271 292.4336 416.9492 c293.3164 416.4326 294.3867 415.876 294.4453 414.7656 c294.5791 414.5732 294.8467 414.3833 295.0586 414.498 c295.3262 414.5166 295.3633 415.2822 295.7461 414.9185 c295.8613 414.6504 l295.7646 414.3457 295.6709 413.8076 295.1738 413.7891 c294.9248 413.7329 294.6543 413.8667 294.4453 414.019 c293.9082 414.5732 294.3311 415.416 293.4287 415.7798 c291.9365 416.2402 290.96 417.8105 290.8066 419.2852 c290.7109 420.7002 290.7695 422.252 291.9951 423.4961 c292.4736 423.8604 293.1055 424.0903 293.7178 423.8975 c294.0635 423.8413 294.4648 423.5923 294.6172 423.3032 cfuu*u1 D1 XR275.9004 412.9497 m273.1738 411.6846 272.3418 408.4385 272.3066 408.2998 C272.2344 408.0132 L272.5156 407.917 L272.623 407.8823 275.1543 407.0527 278.2412 408.5698 c281.3564 410.0977 281.9951 413.1802 282.0225 413.311 C282.0859 413.6377 L281.7568 413.6909 L281.6289 413.7124 278.5762 414.1914 275.9004 412.9497 cf0 D276.1709 412.3643 m278.1611 413.2871 280.4355 413.1802 281.292 413.0972 C281.0479 412.3076 280.2217 410.2583 277.958 409.1475 c275.6865 408.0347 273.7412 408.2998 273.0293 408.4546 C273.292 409.2417 274.1719 411.4355 276.1709 412.3643 Cf*U*u1 D278.6172 419.0698 m275.8857 417.8364 274.877 414.6201 274.8369 414.4839 C274.7432 414.1763 L275.0488 414.0825 L275.1553 414.0479 277.6787 413.2959 280.7773 414.7783 c283.9043 416.2739 284.5684 419.252 284.5947 419.3774 C284.6621 419.7041 L284.3359 419.7627 L284.2129 419.7842 281.3037 420.2822 278.6172 419.0698 cf0 D278.8828 418.4814 m280.8652 419.3774 283.0293 419.2622 283.8594 419.1743 C283.6045 418.4038 282.7598 416.4399 280.499 415.3589 c278.2461 414.2832 276.3135 414.4863 275.5752 414.6255 C275.8887 415.4282 276.8867 417.5796 278.8828 418.4814 Cf*U*u1 D282.165 424.9629 m279.4307 423.7617 278.2451 420.5776 278.1973 420.4414 C278.0771 420.1147 L278.4111 420.021 L278.5186 419.9917 281.0361 419.3149 284.1396 420.7622 c287.2813 422.2231 287.9688 425.0967 287.998 425.2202 C288.0703 425.5439 L287.7441 425.6079 L287.6289 425.6318 284.8652 426.1509 282.165 424.9629 cf0 D282.4248 424.3716 m284.3994 425.2412 286.4541 425.1182 287.2598 425.0244 C286.9922 424.2725 286.1279 422.397 283.8691 421.3457 c281.6406 420.3101 279.7246 420.4521 278.9541 420.5723 C279.3242 421.3887 280.4316 423.4966 282.4248 424.3716 Cf*U*u1 D285.6885 430.7847 m282.9512 429.6128 281.5918 426.458 281.5361 426.3271 C281.3887 425.9795 L281.7549 425.8882 L281.8594 425.8613 284.3691 425.2593 287.4834 426.6719 c290.6357 428.1011 291.3477 430.8701 291.377 430.9878 C291.457 431.3115 L291.1309 431.3813 L291.0215 431.4053 288.4043 431.9434 285.6885 430.7847 cf0 D285.9424 430.1904 m287.9121 431.0308 289.8574 430.9023 290.6328 430.8062 C290.3545 430.0728 289.4717 428.2803 287.2158 427.2583 c285.0117 426.2603 283.1094 426.3457 282.3115 426.4478 C282.7373 427.2793 283.957 429.3423 285.9424 430.1904 Cf*U*u1 D290.5664 436.6094 m287.8213 435.4697 286.291 432.3442 286.2266 432.2134 C286.0469 431.8442 L286.4453 431.7588 L286.5527 431.7344 289.0547 431.21 292.1768 432.5854 c295.3418 433.9819 296.0781 436.647 296.1074 436.7593 C296.1934 437.0806 L295.8691 437.1582 L295.7676 437.1821 293.293 437.7412 290.5664 436.6094 cf0 D290.8125 436.0127 m292.7705 436.8262 294.6113 436.6924 295.3604 436.5879 C295.0693 435.8765 294.168 434.1694 291.917 433.1768 c289.7207 432.208 287.8398 432.248 287.0234 432.3286 C287.5137 433.1738 288.835 435.1914 290.8125 436.0127 Cf*U*u1 D295.9414 442.2285 m293.1934 441.1206 291.4863 438.0249 291.4141 437.894 C291.2061 437.5059 L291.6396 437.4229 L291.7432 437.4043 294.2402 436.9521 297.3672 438.2954 c300.5488 439.6597 301.3086 442.2202 301.3379 442.3271 C301.4297 442.646 L301.1104 442.7285 L301.0117 442.7529 298.6816 443.3335 295.9414 442.2285 cf0 D296.1826 441.6318 m298.1279 442.4155 299.8633 442.2788 300.5859 442.1694 C300.2813 441.4766 299.3613 439.8496 297.1133 438.8892 c294.9375 437.9551 293.0762 437.9473 292.2383 438.0063 C292.7871 438.8652 294.2129 440.8369 296.1826 441.6318 Cf*U*u1 D301.6807 447.542 m298.9277 446.4639 297.0488 443.3975 296.9717 443.2661 C296.7227 442.8569 L297.1963 442.7822 L297.3008 442.7661 299.7891 442.3887 302.9248 443.6973 c306.1172 445.0273 306.9004 447.4805 306.9326 447.5845 C307.0293 447.9009 L306.7139 447.9888 L306.6221 448.0156 304.4365 448.6201 301.6807 447.542 cf0 D301.916 446.9404 m303.8447 447.6943 305.4824 447.5552 306.1758 447.4434 C305.8574 446.7715 304.918 445.2251 302.6758 444.291 c300.5332 443.3975 298.6846 443.3384 297.8203 443.376 C298.4355 444.2485 299.9629 446.1748 301.916 446.9404 Cf*U*u1 D307.6523 452.4438 m304.8916 451.395 302.8418 448.3584 302.7559 448.2295 C302.4668 447.7964 L302.9834 447.729 L303.0879 447.7163 305.5684 447.416 308.7119 448.6899 c311.918 449.9878 312.7256 452.334 312.7578 452.4355 C312.8594 452.7437 L312.5488 452.8423 L312.4629 452.8691 310.4219 453.4956 307.6523 452.4438 cf0 D307.8828 451.8418 m309.793 452.5669 311.332 452.4253 311.9951 452.3071 C311.6631 451.6572 310.7031 450.1909 308.4717 449.2866 c306.3447 448.4277 304.5195 448.3262 303.6367 448.3418 C304.3164 449.2222 305.9346 451.103 307.8828 451.8418 Cf*U*u1 D313.7188 456.8374 m310.9521 455.8174 308.7305 452.8076 308.6367 452.6792 C308.3057 452.2246 L308.8652 452.168 L308.9688 452.1577 311.4443 451.9326 314.5957 453.1714 c317.8125 454.4341 318.6445 456.6768 318.6787 456.7729 C318.7861 457.0781 L318.4814 457.1851 L318.4033 457.2144 316.5029 457.8623 313.7188 456.8374 cf0 D313.9404 456.2324 m315.832 456.9282 317.2773 456.7861 317.9111 456.6631 C317.5625 456.0371 316.5869 454.6455 314.3584 453.771 c312.2598 452.9468 310.459 452.8047 309.5547 452.7969 C310.2988 453.6855 312.0059 455.5181 313.9404 456.2324 Cf*UUu*u1 D271.54 419.1133 m271.459 419.0093 269.5654 416.5503 269.3701 413.5908 c269.1748 410.5781 271.6387 408.2773 271.7461 408.1812 C271.9619 407.98 L272.1816 408.1812 L272.2646 408.2559 274.2158 410.0859 274.3652 413.543 c274.5176 417.0239 272.1016 419.0762 272 419.1616 C271.7432 419.376 L271.54 419.1133 Lf0 D270.0068 413.2539 m270.0068 413.353 270.0098 413.4492 270.0146 413.5483 c270.1592 415.7637 271.3574 417.7168 271.8398 418.4204 C272.3984 417.8452 273.7285 416.2295 273.7285 413.8481 c273.7285 413.7568 273.7256 413.6631 273.7207 413.5698 c273.6104 411.0303 272.4385 409.4385 271.957 408.8872 C271.4111 409.4707 270.0068 411.1724 270.0068 413.2539 Cf*U*u1 D275.3848 425.7441 m275.3203 425.6714 273.7793 423.9727 273.1211 421.5293 c273.0332 421.1982 272.9629 420.8423 272.9199 420.4756 c272.5645 417.5537 274.6758 415.1592 274.7666 415.0576 C274.9756 414.8247 L275.2158 415.0278 L275.2988 415.1001 277.292 416.8286 277.6963 420.1836 c278.1035 423.5767 275.9365 425.6714 275.8447 425.7598 C275.6064 425.9849 L275.3848 425.7441 Lf0 D273.5254 419.8174 m273.5254 420.0073 273.5361 420.2026 273.5596 420.3979 c273.5996 420.7354 273.6621 421.0586 273.7441 421.3608 c274.2158 423.1113 275.1924 424.478 275.6309 425.0322 C276.0938 424.481 277.1025 423.0493 277.1025 421.0078 c277.1025 420.7671 277.0859 420.5186 277.0566 420.2612 c276.7627 417.8159 275.5449 416.2988 275.0342 415.7554 C274.5791 416.3574 273.5254 417.9443 273.5254 419.8174 Cf*U*u1 D279.6953 431.9619 m279.626 431.8979 278.0098 430.3911 277.1875 427.9648 c277.084 427.6567 276.998 427.3223 276.9316 426.9453 c276.418 424.1196 278.1748 421.6338 278.25 421.5269 C278.4453 421.2539 L278.7109 421.4629 L278.7959 421.5293 280.832 423.1563 281.4883 426.4126 c282.1514 429.7119 280.2324 431.8521 280.1504 431.9404 C279.9336 432.1812 L279.6953 431.9619 Lf0 D277.4854 425.9043 m277.4854 426.2065 277.5088 426.52 277.5684 426.833 c277.6289 427.1777 277.7041 427.4805 277.7979 427.7588 c278.3818 429.4814 279.417 430.7285 279.8848 431.2344 C280.2539 430.7124 280.9795 429.4707 280.9795 427.7637 c280.9795 427.3784 280.9414 426.9692 280.8535 426.5386 c280.3828 424.1919 279.1221 422.75 278.5771 422.2148 C278.2178 422.8223 277.4854 424.2559 277.4854 425.9043 Cf*U*u1 D284.4336 437.7734 m284.3613 437.7173 282.6709 436.4033 281.6807 433.9956 c281.5625 433.7119 281.4639 433.3906 281.3701 433.0132 c280.7061 430.2813 282.1006 427.7075 282.1592 427.5977 C282.3359 427.2793 L282.6309 427.4937 L282.7188 427.5552 284.7949 429.0801 285.7021 432.2349 c286.6221 435.4375 284.9551 437.6235 284.8828 437.7144 C284.6875 437.9663 L284.4336 437.7734 Lf0 D281.8408 431.4937 m281.8408 431.938 281.8867 432.4009 281.999 432.8608 c282.082 433.2061 282.1729 433.498 282.2773 433.752 c282.9727 435.4429 284.0615 436.5718 284.5596 437.0293 C284.835 436.5586 285.3271 435.5259 285.3271 434.1294 c285.3271 433.605 285.2578 433.0269 285.0811 432.4141 c284.4365 430.1694 283.1387 428.7993 282.5557 428.2695 C282.2988 428.853 281.8408 430.0835 281.8408 431.4937 Cf*U*u1 D289.5654 443.1836 m289.4902 443.1382 287.7324 442.0171 286.5664 439.6274 c286.4355 439.3574 286.3174 439.0576 286.2021 438.6831 c285.3838 436.0449 286.4189 433.3853 286.4648 433.2729 C286.6113 432.9063 L286.9434 433.123 L287.0313 433.1846 289.1484 434.6079 290.3037 437.6582 c291.4814 440.7646 290.0684 442.9937 290.0068 443.0869 C289.833 443.3521 L289.5654 443.1836 Lf0 D286.5361 436.5239 m286.5361 437.1528 286.6113 437.8271 286.8174 438.4902 c286.9248 438.833 287.0283 439.106 287.1436 439.3438 c287.96 441.0107 289.1025 442.0273 289.624 442.4346 C289.8223 442.0249 290.125 441.2197 290.125 440.1309 c290.125 439.4722 290.0146 438.7153 289.6992 437.8887 c288.8916 435.7505 287.5537 434.4478 286.9277 433.9258 C286.7725 434.4478 286.5361 435.4082 286.5361 436.5239 Cf*U*u1 D295.0586 448.2002 m294.9805 448.1626 293.1592 447.2344 291.8105 444.8638 c291.666 444.6094 291.5322 444.3208 291.3926 443.9595 c290.4189 441.4175 291.1045 438.6753 291.1338 438.5601 C291.2402 438.1401 L291.6123 438.3647 L291.7031 438.418 293.8594 439.7427 295.2617 442.6914 c296.6934 445.6987 295.5371 447.9678 295.4863 448.061 C295.3398 448.3418 L295.0586 448.2002 Lf0 D291.5215 440.9199 m291.5215 441.7734 291.6309 442.7769 291.9951 443.729 c292.123 444.0586 292.2412 444.3179 292.3721 444.5454 c293.3037 446.1826 294.4941 447.0874 295.0449 447.4434 C295.166 447.106 295.332 446.5225 295.332 445.7197 c295.332 444.9546 295.1787 444.0127 294.6816 442.9697 c293.707 440.9229 292.3271 439.6997 291.666 439.1914 C291.5986 439.5874 291.5215 440.1978 291.5215 440.9199 Cf*U*u1 D300.8887 452.8291 m300.8086 452.7969 298.9297 452.0586 297.3916 449.7173 c297.2314 449.4712 297.0781 449.1875 296.9209 448.8506 c295.7949 446.4048 296.126 443.5796 296.1416 443.4619 C296.1982 442.9907 L296.6152 443.2183 L296.71 443.269 298.9033 444.4922 300.5566 447.3389 c302.2402 450.2441 301.3408 452.5508 301.3037 452.6475 C301.1826 452.9414 L300.8887 452.8291 Lf0 D296.7334 444.5718 m296.7334 445.5811 296.8564 447.1699 297.5068 448.5801 c297.6514 448.8906 297.79 449.1445 297.9326 449.3613 c298.9863 450.9697 300.2246 451.7671 300.7979 452.0718 C300.8594 451.8149 300.9238 451.4326 300.9238 450.9268 c300.9238 450.0786 300.7334 448.9307 299.998 447.6621 c298.8662 445.709 297.4482 444.5615 296.7441 444.0693 C296.7393 444.2163 296.7334 444.3794 296.7334 444.5718 Cf*U*u1 D307.0293 457.0752 m306.9492 457.0513 305.0146 456.5 303.2861 454.1855 c303.1045 453.9448 302.9326 453.6719 302.7617 453.3618 c301.4775 451.0122 301.4639 448.104 301.4639 447.9805 C301.4668 447.4644 L301.9297 447.6919 L302.0264 447.7402 304.2598 448.8638 306.1572 451.6089 c308.0938 454.4102 307.4541 456.7544 307.4248 456.8506 C307.3369 457.1582 L307.0293 457.0752 Lf0 D303.3291 453.0508 m303.4834 453.3374 303.6396 453.5811 303.8027 453.8003 c304.9795 455.3765 306.2695 456.0693 306.8633 456.3232 C306.8818 456.1733 306.8984 455.9917 306.8984 455.7588 c306.8984 454.8945 306.6865 453.5088 305.627 451.9756 c304.3398 450.1157 302.8818 449.0376 302.1387 448.564 C302.208 449.5083 302.4482 451.4458 303.3291 453.0508 Cf*U*u1 D313.4268 460.9419 m313.3438 460.9282 311.3613 460.5591 309.4346 458.2822 c307.5186 456.021 307.0693 452.2832 307.0508 452.1255 C306.9863 451.5659 L307.5 451.7939 L307.5967 451.8364 309.873 452.8613 312.0166 455.5073 c314.2002 458.2046 313.8174 460.5806 313.8008 460.6792 C313.7451 460.9976 L313.4268 460.9419 Lf0 D309.9268 457.8647 m311.2324 459.4082 312.5703 459.9995 313.1855 460.2061 C313.1885 460.1899 313.1885 460.1816 313.1885 460.1631 c313.1885 459.4194 312.9961 457.7417 311.5137 455.9116 c310.0791 454.1401 308.5732 453.1313 307.792 452.6792 C308 453.8271 308.5859 456.2832 309.9268 457.8647 Cf*UUU*u1 D252.168 428.9438 m252.168 413.3423 260.6123 398.332 274.207 389.7671 C274.7695 389.4141 L275.1738 389.9414 L275.2881 390.0913 275.334 390.2329 275.334 390.3638 c275.334 390.6987 275.0479 390.9609 274.8867 391.1104 C274.1006 391.8652 L271.2988 395.0464 270.5479 398.0645 270.5479 400.3843 c270.5479 402.9502 271.4648 404.6626 271.54 404.7935 C271.791 405.2461 L271.4463 405.6338 L265.7012 412.042 262.668 420.1011 262.668 428.9438 c262.668 448.4009 278.4961 464.23 297.9541 464.23 c303.3633 464.23 308.5537 463.0391 313.3809 460.6899 C313.8809 460.4468 L320.9746 468.5376 L320.1875 468.9766 L313.4268 472.7412 305.7373 474.729 297.9541 474.729 c272.707 474.729 252.168 454.188 252.168 428.9438 cf0 D253.624 428.9438 m253.624 453.3857 273.5088 473.2734 297.9541 473.2734 c305.1855 473.2734 312.3242 471.481 318.6709 468.1201 C317.7422 467.0605 314.0713 462.873 313.5068 462.2314 C308.627 464.5161 303.3984 465.6855 297.9541 465.6855 c277.6934 465.6855 261.209 449.2036 261.209 428.9438 c261.209 419.9053 264.2754 411.6597 270.0527 405.04 C269.7207 404.272 269.1289 402.5889 269.1289 400.3604 c269.1289 398.5166 269.5576 396.3042 270.8545 393.9521 C260.1279 402.498 253.624 415.4907 253.624 428.9438 Cf*U314.0146 461.9985 m308.9883 464.4468 303.5859 465.6855 297.9541 465.6855 c277.6934 465.6855 261.209 449.2036 261.209 428.9438 c261.209 419.7368 264.375 411.3408 270.3623 404.6626 C270.9912 403.9614 L273.7852 408.1836 L273.6357 408.3569 L273.3857 408.3853 273.1787 408.4219 273.0293 408.4546 C273.0684 408.5708 273.1221 408.7207 273.1895 408.8896 C272.9697 409.1514 272.75 409.4131 272.541 409.6802 C272.3154 409.3213 272.1035 409.0552 271.957 408.8872 C271.4111 409.4707 270.0068 411.1724 270.0068 413.2539 c270.0068 413.3213 270.0098 413.3872 270.0127 413.4536 C267.3984 418.0547 266.0732 423.2407 266.0732 428.9438 c266.0732 446.5225 280.375 460.8237 297.9541 460.8237 c302.2695 460.8237 306.4307 459.9839 310.3447 458.3247 C310.7646 458.7583 311.1787 459.1001 311.5625 459.3677 C307.2773 461.2896 302.708 462.2793 297.9541 462.2793 c279.5723 462.2793 264.6152 447.3252 264.6152 428.9438 c264.6152 420.9731 267.1035 413.9658 271.9756 408.0898 C271.6924 407.6592 271.2959 407.0596 270.8418 406.375 C265.5059 412.6602 262.668 420.4297 262.668 428.9438 c262.668 448.4009 278.4961 464.23 297.9541 464.23 c303.123 464.23 308.0859 463.1304 312.7285 460.9844 C312.5342 460.5635 312.3447 460.1514 312.1533 459.7388 C312.5801 459.979 312.9404 460.1235 313.1855 460.2061 C313.1885 460.1899 313.1885 460.1816 313.1885 460.1631 c313.1885 459.6206 313.083 458.5811 312.4531 457.3481 C312.6182 457.2676 L314.6572 461.688 L314.0146 461.9985 Lfu0 XR313.6885 469.2007 m310.1758 464.7583 L310.498 464.6479 310.8184 464.5332 311.1377 464.4141 C314.624 468.8242 L314.3145 468.9536 314.002 469.0786 313.6885 469.2007 Cf306.8125 471.2471 m304.7656 466.1748 L305.0879 466.1157 305.4102 466.0527 305.7314 465.9854 C307.7715 471.0371 L307.4531 471.1118 307.1328 471.1797 306.8125 471.2471 Cf298.6357 472.1611 m298.1318 466.7852 L298.4561 466.7837 298.7793 466.7788 299.1025 466.769 C299.6045 472.1353 L299.2822 472.1475 298.959 472.1563 298.6357 472.1611 Cf290.667 471.5537 m291.6885 466.2661 L292.0068 466.3193 292.3252 466.3687 292.6455 466.4136 C291.623 471.7061 L291.3027 471.6592 290.9844 471.6079 290.667 471.5537 Cf282.9346 469.479 m285.3525 464.6279 L285.6592 464.7363 285.9678 464.8413 286.2773 464.9419 C283.8525 469.8076 L283.5449 469.7012 283.2393 469.5918 282.9346 469.479 Cf275.6006 465.9312 m279.209 461.8101 L279.4951 461.9741 279.7842 462.1333 280.0742 462.29 C276.4463 466.4321 L276.1621 466.2681 275.8809 466.1011 275.6006 465.9312 Cf268.9365 460.9585 m273.4912 457.7939 L273.7471 458.0107 274.0059 458.2246 274.2666 458.4351 C269.6816 461.6196 L269.4307 461.4023 269.1826 461.1816 268.9365 460.9585 Cf263.2676 454.7139 m268.501 452.6777 L268.7139 452.9424 268.9316 453.2041 269.1514 453.4624 C263.8779 455.5146 L263.6719 455.25 263.4678 454.9834 263.2676 454.7139 Cf258.8887 447.4443 m264.5205 446.6592 L264.6826 446.9639 264.8486 447.2666 265.0186 447.5664 C259.3369 448.3584 L259.1836 448.0557 259.0342 447.751 258.8887 447.4443 Cf256.0215 439.4678 m261.7637 440.0171 L261.8672 440.353 261.9736 440.688 262.0859 441.02 C256.2852 440.4653 L256.1934 440.1343 256.1055 439.8018 256.0215 439.4678 Cf254.7783 431.1128 m260.332 433.0435 L260.3711 433.4019 260.415 433.7588 260.4639 434.1143 C254.8428 432.1602 L254.8174 431.812 254.7949 431.4629 254.7783 431.1128 Cf255.208 422.6758 m260.2256 425.9702 L260.1982 426.3394 260.1729 426.709 260.1553 427.0811 C255.0586 423.7339 L255.1045 423.3804 255.1543 423.0278 255.208 422.6758 Cf257.3477 414.4194 m261.4209 418.9053 L261.3203 419.2788 261.2295 419.6563 261.1396 420.0342 C256.9814 415.4546 L257.0986 415.1079 257.2207 414.7632 257.3477 414.4194 Cf261.1797 406.5293 m264.0605 412.0107 L263.8809 412.3672 263.7012 412.7241 263.5332 413.0864 C260.5986 407.5034 L260.7881 407.1763 260.9814 406.8516 261.1797 406.5293 Cf266.0879 399.9546 m267.6279 406.3057 L267.373 406.6416 267.123 406.98 266.8799 407.3228 C265.3096 400.8433 L265.5654 400.5439 265.8252 400.248 266.0879 399.9546 CfU312.9688 456.9487 m313.1016 456.8604 313.2334 456.7729 313.3623 456.6855 C313.4805 456.7378 313.5977 456.793 313.7188 456.8374 c313.8604 456.8896 313.999 456.9346 314.1367 456.979 C313.8389 457.1753 313.5596 457.395 313.2939 457.6279 C313.2021 457.4082 313.0928 457.1816 312.9688 456.9487 CfUu*u223.0864 367.3789 m223.0864 367.582 L224.8838 367.582 L226.1543 363.1533 L226.1724 363.1533 L227.4971 367.582 L229.29 367.582 L229.29 367.3789 L228.6055 367.3789 L228.6055 361.7695 L229.29 361.7695 L229.29 361.5664 L227.0376 361.5664 L227.0376 361.7695 L227.7314 361.7695 L227.7314 367.2695 L227.7134 367.2695 L225.9653 361.5664 L225.731 361.5664 L224.0459 367.2695 L224.0278 367.2695 L224.0278 361.7695 L224.7036 361.7695 L224.7036 361.5664 L223.0864 361.5664 L223.0864 361.7695 L223.7622 361.7695 L223.7622 367.3789 L223.0864 367.3789 lf*U*u232.8662 364.0039 m233.6582 366.4443 L233.6763 366.4443 L234.4146 364.0039 l232.8662 364.0039 Lf1 D232.9204 361.5664 m232.9204 361.7695 L232.146 361.7695 L232.7852 363.7539 L234.5044 363.7539 L235.1255 361.7695 L234.3965 361.7695 L234.3965 361.5664 L236.665 361.5664 L236.665 361.7695 L236.0347 361.7695 L234.1802 367.6602 L233.8296 367.6602 L231.876 361.7695 L231.165 361.7695 L231.165 361.5664 l232.9204 361.5664 Lf*U*u0 D240.2705 361.5664 m238.4126 361.5664 L238.4126 361.7695 L239.1704 361.7695 L240.7573 364.4121 L239.0439 367.3789 L238.4126 367.3789 L238.4126 367.582 L240.7393 367.582 L240.7393 367.3789 L240.0718 367.3789 L241.3433 365.2598 L242.624 367.3789 L241.8843 367.3789 L241.8843 367.582 L243.6699 367.582 L243.6699 367.3789 L242.9487 367.3789 L241.5146 364.998 L243.3994 361.7695 L244.0034 361.7695 L244.0034 361.5664 L241.668 361.5664 L241.668 361.7695 L242.3892 361.7695 L240.9287 364.1958 L239.4858 361.7695 L240.2705 361.7695 L240.2705 361.5664 lf*U*u245.8921 363.2085 m245.8921 363.8149 L248.0952 363.8149 L248.0952 363.2085 L245.8921 363.2085 lf*U*u251.6133 367.3789 m251.8657 367.3789 l253.083 367.3789 253.6606 367.2798 253.6606 366.0195 c253.6606 365.02 253.3901 364.4883 251.9199 364.4883 C251.6133 364.4883 l251.6133 367.3789 Lf1 D250.0273 367.3789 m250.7393 367.3789 L250.7393 361.7695 L249.9644 361.7695 L249.9644 361.5664 L252.416 361.5664 L252.416 361.7695 L251.6133 361.7695 L251.6133 364.2852 L252.0459 364.2852 l253.939 364.2852 254.6138 365.2451 254.6138 365.9834 c254.6138 366.7759 254.0923 367.582 252.4248 367.582 C250.0273 367.582 l250.0273 367.3789 Lf*U*u0 D256.3247 361.5664 m256.3247 361.7695 L257.0635 361.7695 L257.0635 367.3789 L256.3247 367.3789 L256.3247 367.582 L258.7666 367.582 L258.7666 367.3789 L257.9375 367.3789 L257.9375 361.7695 L259.5503 361.7695 L260.2891 361.7695 260.6406 362.6714 260.7485 363.2485 c260.9199 363.2485 L260.8208 361.5664 L256.3247 361.5664 lf*U*u264.167 364.0039 m264.959 366.4443 L264.9771 366.4443 L265.7153 364.0039 l264.167 364.0039 Lf1 D264.2212 361.5664 m264.2212 361.7695 L263.4468 361.7695 L264.0859 363.7539 L265.8052 363.7539 L266.4263 361.7695 L265.6973 361.7695 L265.6973 361.5664 L267.9658 361.5664 L267.9658 361.7695 L267.3354 361.7695 L265.4814 367.6602 L265.1304 367.6602 L263.1768 361.7695 L262.4658 361.7695 L262.4658 361.5664 l264.2212 361.5664 Lf*U*u0 D270.5718 367.3789 m269.8687 367.3789 L269.8687 367.582 L271.6206 367.582 L274.1782 363.2256 L274.1968 363.2256 L274.1968 367.3789 L273.4941 367.3789 L273.4941 367.582 L275.1558 367.582 L275.1558 367.3789 L274.4624 367.3789 L274.4624 361.4414 L274.2319 361.4414 L270.855 367.1929 L270.8374 367.1929 L270.8374 361.7695 L271.5308 361.7695 L271.5308 361.5664 L269.8687 361.5664 L269.8687 361.7695 L270.5718 361.7695 L270.5718 367.3789 lf*U*u281.5991 365.9883 m281.396 365.9766 L281.2065 366.8301 280.7378 367.5039 279.7915 367.5039 c279.2144 367.5039 278.7725 367.1089 278.5923 366.7764 c278.2407 366.1206 278.2227 364.8447 278.2227 364.3506 c278.2227 362.8057 278.4121 361.6914 279.8364 361.6914 c280.7109 361.6914 281.2607 362.4194 281.5068 363.207 c281.7231 363.207 L281.7231 361.5669 L281.4795 361.5669 L281.2261 361.9434 L280.8013 361.5845 280.3125 361.4414 279.8057 361.4414 c278.1328 361.4414 277.1943 362.8862 277.1943 364.6113 c277.1943 366.3809 278.5664 367.707 279.8423 367.707 c280.3848 367.707 280.7378 367.5396 281.1719 367.2344 c281.4668 367.5195 L281.5991 367.5039 L281.5991 365.9883 lf*U*u287.2178 367.3789 m287.2178 367.582 L289.0112 367.582 L289.0112 367.3789 L288.3442 367.3789 L286.2588 365.1289 L289.0024 361.7695 L289.4258 361.7695 L289.4258 361.5664 L287.1362 361.5664 L287.1362 361.7695 L287.8574 361.7695 L285.5718 364.6978 L285.5444 364.7427 285.5806 364.7876 285.644 364.8506 c288.0288 367.3789 L287.2178 367.3789 lf286.1777 361.5664 m283.9136 361.5664 L283.9136 361.7695 L284.6074 361.7695 L284.6074 367.3789 L283.9136 367.3789 L283.9136 367.582 L286.1777 367.582 L286.1777 367.3789 L285.4814 367.3789 L285.4814 361.7695 L286.1777 361.7695 L286.1777 361.5664 lf*U*u291.2124 363.2085 m291.2124 363.8149 L293.4155 363.8149 L293.4155 363.2085 L291.2124 363.2085 lf*U*u299.9653 367.5181 m300.106 367.5127 L300.106 365.9741 L299.9023 365.9727 L299.7222 366.8643 299.0732 367.5039 298.0674 367.5039 c297.4893 367.5039 297.0464 367.1177 296.8657 366.7856 c296.5132 366.1304 296.4951 364.8462 296.4951 364.3525 c296.4951 362.8057 296.6851 361.6445 298.1128 361.6445 c299.3511 361.6445 299.4141 362.4727 299.3872 363.4897 c298.5103 363.4897 L298.5103 363.7061 L300.9526 363.7061 L300.9526 363.4897 L300.4028 363.4897 L300.3398 362.4907 299.9082 361.4414 298.0767 361.4414 c296.4048 361.4414 295.4668 362.8867 295.4668 364.6128 c295.4668 366.3906 296.8384 367.707 298.1128 367.707 c298.7451 367.707 299.2603 367.5215 299.6489 367.1719 C299.9653 367.5181 lf*U*u302.5913 361.5664 m302.5913 361.7695 L303.3843 361.7695 L303.3843 367.3789 L302.5913 367.3789 L302.5913 367.582 L307.1636 367.582 L307.1636 366.1182 L306.9634 366.1182 L306.8105 367.1899 306.2549 367.3789 305.4341 367.3789 c304.2583 367.3789 L304.2583 364.7852 L305.1719 364.7852 305.4614 364.7944 305.5884 365.749 c305.7886 365.749 L305.7886 363.4712 L305.5884 363.4712 L305.5337 364.4399 305.1538 364.5576 304.2583 364.5664 c304.2583 361.7695 L305.353 361.7695 L306.5415 361.7695 306.936 361.9146 307.1724 363.2539 c307.4067 363.2539 L307.2896 361.5664 L302.5913 361.5664 lf*U*u309.563 361.5352 m309.438 361.5352 L309.438 363.0952 L309.6079 363.0952 L309.8511 362.2754 310.4731 361.6445 311.3418 361.6445 c312.1187 361.6445 312.8599 362.1572 312.8599 362.9478 c312.8599 363.478 312.7334 363.7207 312.0376 363.999 c311.7031 364.125 310.3027 364.5835 310.167 364.6733 c309.6445 364.9966 309.438 365.5449 309.438 366.0479 c309.438 366.4165 309.5459 366.731 309.8062 367.0728 c310.0767 367.4229 310.5195 367.707 311.2061 367.707 c311.6216 367.707 312.209 367.4502 312.3853 367.3179 c312.729 367.5806 L312.8584 367.5679 L312.8584 366.1704 L312.6738 366.1704 L312.4756 366.9185 311.9438 367.5039 311.1431 367.5039 c310.5283 367.5039 309.8599 367.0806 309.8599 366.4048 c309.8599 364.9092 313.2817 365.873 313.2817 363.4331 c313.2817 362.2021 312.5083 361.4414 311.3286 361.4414 c310.8237 361.4414 310.3198 361.5742 309.9502 361.9414 C309.563 361.5352 lf*U*u315.106 361.5664 m315.106 361.7695 L315.8989 361.7695 L315.8989 367.3789 L315.106 367.3789 L315.106 367.582 L319.6782 367.582 L319.6782 366.1182 L319.478 366.1182 L319.3257 367.1899 318.7695 367.3789 317.9492 367.3789 c316.7729 367.3789 L316.7729 364.7852 L317.687 364.7852 317.9766 364.7944 318.103 365.749 c318.3032 365.749 L318.3032 363.4712 L318.103 363.4712 L318.0488 364.4399 317.6689 364.5576 316.7729 364.5664 c316.7729 361.7695 L317.8677 361.7695 L319.0566 361.7695 319.4512 361.9146 319.6875 363.2539 c319.9214 363.2539 L319.8047 361.5664 L315.106 361.5664 lf*U*u321.9175 361.5664 m321.9175 361.7695 L322.6567 361.7695 L322.6567 367.3789 L321.9175 367.3789 L321.9175 367.582 L324.3594 367.582 L324.3594 367.3789 L323.5303 367.3789 L323.5303 361.7695 L325.1431 361.7695 L325.8823 361.7695 326.2334 362.6714 326.3418 363.2485 c326.5127 363.2485 L326.4136 361.5664 L321.9175 361.5664 lf*U*u328.1797 361.5664 m328.1797 361.7695 L328.9185 361.7695 L328.9185 367.3789 L328.1797 367.3789 L328.1797 367.582 L330.6216 367.582 L330.6216 367.3789 L329.7925 367.3789 L329.7925 361.7695 L331.4053 361.7695 L332.144 361.7695 332.4956 362.6714 332.6035 363.2485 c332.7749 363.2485 L332.6758 361.5664 L328.1797 361.5664 lf*U*u334.6021 361.5352 m334.4771 361.5352 L334.4771 363.0952 L334.647 363.0952 L334.8901 362.2754 335.5117 361.6445 336.3809 361.6445 c337.1577 361.6445 337.8989 362.1572 337.8989 362.9478 c337.8989 363.478 337.772 363.7207 337.0762 363.999 c336.7422 364.125 335.3418 364.5835 335.2061 364.6733 c334.6836 364.9966 334.4771 365.5449 334.4771 366.0479 c334.4771 366.4165 334.5845 366.731 334.8447 367.0728 c335.1157 367.4229 335.5586 367.707 336.2451 367.707 c336.6606 367.707 337.248 367.4502 337.4243 367.3179 c337.7681 367.5806 L337.8975 367.5679 L337.8975 366.1704 L337.7129 366.1704 L337.5146 366.9185 336.9829 367.5039 336.1821 367.5039 c335.5674 367.5039 334.8989 367.0806 334.8989 366.4048 c334.8989 364.9092 338.3208 365.873 338.3208 363.4331 c338.3208 362.2021 337.5474 361.4414 336.3672 361.4414 c335.8628 361.4414 335.3584 361.5742 334.9893 361.9414 C334.6021 361.5352 lf*U*u344.6875 365.9883 m344.4844 365.9766 L344.2949 366.8301 343.8262 367.5039 342.8794 367.5039 c342.3027 367.5039 341.8608 367.1089 341.6807 366.7764 c341.3291 366.1206 341.311 364.8447 341.311 364.3506 c341.311 362.8057 341.5005 361.6914 342.9248 361.6914 c343.7993 361.6914 344.3491 362.4194 344.5952 363.207 c344.811 363.207 L344.811 361.5669 L344.5679 361.5669 L344.3145 361.9434 L343.8892 361.5845 343.4009 361.4414 342.894 361.4414 c341.2207 361.4414 340.2827 362.8862 340.2827 364.6113 c340.2827 366.3809 341.6548 367.707 342.9302 367.707 c343.4731 367.707 343.8262 367.5396 344.2603 367.2344 c344.5552 367.5195 L344.6875 367.5039 L344.6875 365.9883 lf*U*u351.1797 364.7993 m351.1797 367.3789 L350.4771 367.3789 L350.4771 367.582 L352.7563 367.582 L352.7563 367.3789 L352.0537 367.3789 L352.0537 361.7695 L352.7563 361.7695 L352.7563 361.5664 L350.4771 361.5664 L350.4771 361.7695 L351.1797 361.7695 L351.1797 364.5366 L348.585 364.5366 L348.585 361.7695 L349.2876 361.7695 L349.2876 361.5664 L347.0083 361.5664 L347.0083 361.7695 L347.7109 361.7695 L347.7109 367.3789 L347.0083 367.3789 L347.0083 367.582 L349.2876 367.582 L349.2876 367.3789 L348.585 367.3789 L348.585 364.7993 L351.1797 364.7993 lf*U*u356.2944 364.0039 m357.0864 366.4443 L357.1045 366.4443 L357.8428 364.0039 l356.2944 364.0039 Lf1 D356.3486 361.5664 m356.3486 361.7695 L355.5742 361.7695 L356.2134 363.7539 L357.9326 363.7539 L358.5537 361.7695 L357.8247 361.7695 L357.8247 361.5664 L360.0933 361.5664 L360.0933 361.7695 L359.4629 361.7695 L357.6089 367.6602 L357.2578 367.6602 L355.3042 361.7695 L354.5933 361.7695 L354.5933 361.5664 l356.3486 361.5664 Lf*U*u0 D361.9854 361.5664 m361.9854 361.7695 L362.7153 361.7695 L362.7153 367.3789 L361.9854 367.3789 L361.9854 367.582 L366.3818 367.582 L366.4536 365.9897 L366.2925 365.9897 L366.0117 367.0811 365.8579 367.3789 364.7314 367.3789 c363.5889 367.3789 L363.5889 364.7539 L364.3896 364.7632 364.7495 364.79 364.8394 365.6924 c365.0425 365.6924 L365.0425 363.478 L364.8481 363.478 L364.7856 364.3999 364.4258 364.5352 363.5889 364.5352 c363.5889 361.7695 L364.3628 361.7695 L364.3628 361.5664 L361.9854 361.5664 lf*U*u369.2295 361.5664 m369.2295 361.7695 L369.9771 361.7695 L369.9771 367.3789 L369.3643 367.3789 L368.5083 367.3789 368.4185 366.7388 368.2471 365.8457 c368.0127 365.8457 L368.1118 367.582 L372.7573 367.582 L372.8203 365.8457 L372.5864 365.8457 L372.4868 366.7026 372.1885 367.3789 371.2485 367.3789 c370.8511 367.3789 L370.8511 361.7695 L371.6011 361.7695 L371.6011 361.5664 L369.2295 361.5664 lf*UU0 R0 G300 Ar0.3 w 10 M223.0186 370.7964 m372.8887 370.7964 lSLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF