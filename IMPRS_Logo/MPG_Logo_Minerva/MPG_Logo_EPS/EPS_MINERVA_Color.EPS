%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (Tom Nakat) (HAAK & NAKAT)%%Title: (minerva_4c.eps)%%CreationDate: (3/2/00) (7:22 PM)%%BoundingBox: 225 350 370 495%%HiResBoundingBox: 225.4175 350.7104 369.4492 494.7388%%DocumentProcessColors: Cyan Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKCustomColor: 1 0 0.47 0.3 (PANTONE 328)%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 298 421 298 421%AI3_TileBox: 249 -312 787 469%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 155.9055 155.9055%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 150.5986 500.3701 6.35 1905 1029 18 0 0 7 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:249 -312%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 128 8%%BeginData: 16870 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA8845959342E0B0C0C0C0B0C0C0C0B0C0C59348359AEA8FD%64FF84832E0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C%0B3559A8FD5DFF7D590C0C0B0C0C0C2E59598484AFFD0AFF84AF84843435%0C0C0B0C0C0C3484AEFD55FFAF59340B0C0B0C0C5959AEFD18FFA883342E%0B0C0B0C2E83A8FD50FF84590B0C0C0C3484A8FD20FFAF7D350C0C0B0C35%A8FD4BFFAE840C0C0B0C0C84AEFD27FF59340B0C0B2E59FD48FF59340C0C%0B83AEFD2DFF59340C0C0B84FD44FF830B0C0B2E59FD13FFA8A884A88484%59A884A884FD13FFA8840C0C0B0C59FD40FF84340C0C0CA8FD0FFFAF835F%34340C0C0B0C0C0C0B0C0C0C0BFD040C595984A8FD0FFF83340C0C0CAEFD%3DFF2E0C0B0C59FD0DFF84832E0C0B0C0B0C0B0C0B342E352E342E352E34%0C0C0B0C0B0C0B0C0B3559A8FD0DFF840B0C0B35A8FD39FF840B0C0C5FAF%FD0BFF84590C0C0B0C0C2E2E8484A8FD08FF84FD05FFA8A859590C0C0B0C%0C2E59A8FD0CFF590C0B3483FD36FFA8350B0C0CAEFD0AFFA8590B0C0B0C%0B597DFD04FF5984FD07FF840CA8FD09FFA8842E0C0B0C0B0C59AFFD0AFF%A8340B0C2EAFFD33FF84340C0C59FD0AFFAE34FD040C5F84FD07FF0C5FFD%07FF840BFD08FF840CFD04FFA859340C0C0B5984FD0AFF840C0C0CAEFD31%FF590C0B34A8FD09FF7D340B0C0B5984FF84FD08FF352EFD07FF590CFD08%FF0C35FD07FF842E0C0B0C0C84FD09FFAF2E0C0B59FD2FFF2E0C0C59AFFD%08FFAF340C0B0C59FFFFFF830C84FD07FF590CFD07FF5934FD07FF840C83%FD07FF59FFAE590B0C0C3484FD09FF590C0B59FD2CFFAE2E0C0B84FD08FF%A8590B0C0B59A8FD05FF0B34FD07FF840BAEFD06FF2E35FD07FF590BFD07%FF340C83FFFFAF590C0B0C84FD09FF7D0C0B34A8FD2AFF0C0C0CFD09FF83%2E0B0C59FD08FF840BAFFD06FFA80C84FD06FF5935FD07FF0C5FFD06FF83%0C59FD04FFA80C0C59FD0BFFA8340C2EA8FD27FFA80B0C2EAFFD07FFAF0C%0C0B3484FD09FFAE0C2EFD07FF0B83FD06FF2E84FD06FF590CA8FD05FF84%0C2EFD04FFA80B0C59FD0DFFA8340B0CA8FD25FFAF0C0C2EFD08FF840C0C%0B84FF840B84FD08FF590C84FD06FFAFAFFFFFAF598B7D84598B83FD04FF%847DFD06FF2E0CFD04FFAF0C0C2EFD0FFFAF350C2EA8FD23FFA80B0C2EFD%07FFA8590B0C2EAFFFFFA8340BAEFD08FF0B59FD04FF59580B0C0B0C0B0C%0B0C0B0C0B0C0B0C052E2E7D7DFD04FF340BA8FD04FF0B0C2EFD11FFA834%0B0CA8FD21FFAF0C0C2EFD08FF350B0C59FD06FF340CAFFD07FFAFFF8B2E%2E0B0C0C0C0B0C0C0C0B340C340B340C0C0B0C0C0C0B0C0C357DFF84A8FD%04FF2E0C0CFD14FF350B34A8FD1FFFAF0B0C0CFD07FFA80C0B0C83FD07FF%A80C2EFD06FF8B2E0C0B0C0B0C0B342E837DFD0AFFAF59590C0C0B0C0B0C%0B347DFFFFFF340C0BAFFD14FFAE340B0CA8FD1EFF2E0C2EFD07FFA82E0B%34A8FD09FF840C2EFFFFFF590C0BFD040C5FFD16FF59340B0C0B0C0C5959%0C0CA8FD17FF340B35FD1DFF2E0C0BFD07FF7D0C0B34A8FD0BFF7D83A859%050C0B0C0583FD05FFA859592E340B0C0B0C0B0C0B0C0C35598384FD05FF%592E0B0C0B0C0584FD18FFA80C0B35FD1BFF590C0BFD07FF840C0C35FF83%0C84FD0AFF590C0B0C0C5984FFFFFFA884340C0B0C0C0C0B0C0C0C0B0C0C%0C0B0C0C0C0B0C0C597DFD05FF2E0C0B60FD1AFFA80C0C5FFD19FF830C0B%84FD06FFA80C0B34AEFFA8590B34A8FD06FFAF0B0C0B0C2EFFFFFFA8840C%0C0B0C0B0C2E8383A8A8FD06FFAF84A859590C0C0B0C0B3459AF590C0B0C%FD1CFF7D0C0B84FD17FFAE2E0B59FD06FFA8340C34AFFD04FF840C2E7DFD%04FF590B0C0B59FFFFFFAF590C0B0C0C597DFD13FFA884350C0B0C0C2E59%592EFD1DFF590C0CFD17FF350B34A8FD05FFA80C0B34A8FD07FF2E0C2EFF%840C0B0C0B84FFFF84340B0C0B347DFD19FFA884050C7DFF0584FD1EFF0C%0C2EFD15FF840C0CA8FD06FF350B34FD0AFF7DA8840C0B0C58FFFFFF590C%0B0C59AFFD1CFF5935FFFF840CAFFD1FFF0C0C7DFD13FFAF0B0C59FD06FF%590B0CA8FD0BFF2E0C0B0C7DFFFF840B0C0B59A8FD1BFF5959A80CA8FFFF%590B342E0C0B0C0B59FD19FF830B0CA8FD12FF340C2EFD06FF840B0C84FD%0BFF2E0C0B34FFFFAF590C0C2EAFFD1BFFA80C340B5959FFFFAF0C0C3484%AEFFA83484FF59340C59FD15FF350C35FD11FF830C0BA8FD06FF0B0C59AE%3484FD08FF0B0C0B2EFFFF840C0B0C59FD1CFF840B84840C0BAEFFA80534%A8FFFFFFA8340C842E0C0B0C0BA8FD14FFA80C0B84FD10FF340C5FFD06FF%2E0C2EFF832E0B3459FD05FF2E0C0C59FFFF840C0B35A8FD1CFFA80BFFFF%A81235FFAF0B35FD04FF842EFD040C0B5F84342EFD15FF590C0CFD0FFF83%0B0CAEFD05FF590C0BAFFFFFFF842E0C0B3483FF2E0C0B59FFFF340C0B59%A8FD1DFF0B84FFFF592E59A80B34FFFFA8840C0C83FF0C0C0B84FFFF2E34%FD16FF0B0C59FD0EFF0C0C7DFD05FFAE2E0B84FD06FFA8840C84580C0C59%FFFF590C0B83FD1CFF83FF5959FFFFAF342E340B0C0C340B0C3584FFFF59%0C2EFFFFFFA80C84FD16FF840C2EAFFD0CFF590C0CFD06FF590B34FD0AFF%7D0C0B34FFFF340C0B84FD1BFFA80B0C590C84FFFF590C0C0B340C592E0C%7DFFFFFF0C0C34FD04FF2E0BFD18FF2E0B59FD0CFF340C84FD05FFAF0C0C%A8FD0AFF0C0B34FFFF590C0C84FD1BFF840B8459840CFFFF840B3460FD04%FF3534FFFFFF2E0C84FD05FFA83459FD17FF840C0CFD0BFF840B34FD06FF%2E0C59FD0AFF0C0B0C7DFF830C0B84FD1BFFAF0B84FF832E59FF840B34A8%FFFFFFA8342EFFFFFF2E0C7DFD07FF7D0C59FD17FF0C0C59FD0AFF0C0C7D%FD05FF840C0BFD0AFF590B0C83FF840C0C5FFD1CFF0C84FFFF343559840B%59FD04FF832E34FFFFAF0C34A8FD09FF590CA8FD16FF840C34FD09FF830C%0BFD06FF2E0B59FD0AFF0B0C0CFFA80C0B59FD1CFF7D2EFFFFFF0C0C350B%34FFAE7D590B3484FFFFAE0B0CA8FD0BFF3434A8FD15FFA80C0B84FD08FF%590C5FFD05FFAF0C0CFF592E595984A8AFFFFF0C0C0BFFFF590B35FD1AFF%A834AF3583FFFF840C590C0C0B0C0C3459FD05FF0C2EA8FD0DFF352EFD16%FF590C34FD07FFAF0B0CA8FD05FF2E0C59FF59592E0C0B0C0B83580C0B84%FF840B0CA8FD19FF830C0C830BFFFFFF0B590B34598484830BFD04FFA80B%0CA8FD0FFF0BA8FD16FF0B0CA8FD06FF830C2EFD05FFAE0C0BFD07FFA8AF%FF0C0B59FFFF0B0C59FD19FF8334A8840C35FFFF2E342EA8FD04FF2E84FF%FFFFAF0C2EA8FD0FFFAF34AEFD16FF350C84FD06FF340B83FD05FF590B59%FD09FF590B0C7DFF340C0CFD19FFA80C84FF84342EFF2E0C0BFD05FF2E34%FFFFFFA80B0CA8FD0CFFAF7D592E0C0BFD17FF590C2EFD06FF0C0CA8FD05%FF0C0C84FD09FF0C0C2EFFA80C0BAFFD19FF5959FFFF842E59350C35FD04%FFA80C59FD04FF2E34A8FD0AFFAE59340B0C0C0C0B0C84FD17FF0C0CA8FD%04FF590C2EFD05FF830C0BFD09FF2E0C0BFFFF350B59FD19FFAF0BFFFFFF%34590B0C34FFA8A8592E0C84FD04FF2E0CA8FD08FFAF590C0B0C0B0C0B34%0C0C0C83FD17FF340B84FD04FF590B84FD05FF590B59FD09FF0C0B59FFA8%0B0CAEFD17FF59A85959FFFFA80C83590B350C0C0C5984FD05FF590C84FD%07FF84350B0C0C0C0B59A8FFFF350C347DFD17FF7D0C35FD04FF0B0CA8FD%05FF0B0C83FD08FF8A0B0C7DFF340C34FD17FF0C0C0C347DFFFF592E832E%0C05352E0C83FD05FF590C7DFD06FF840B0C0B597DAE0C0C84FF84340B0C%0BFD18FFA80B0CFFFFFFA80C0CFD05FFA80C0CFD09FF2E0C0CFFAF0C0BAF%FD16FF3435FF0C2EAFFFAE0B3434A8FFFFFF840CFD05FF840C59FD05FF84%340B0C83FFFFFFAF0C0BFD040CFF3435FD19FF340CAEFFFF830B59FD05FF%830B59A8A859832E352E0CFF0C0B59FF840B34FD16FF590CA8FF2E3484FF%0B0C83FD04FFAF0B84FD04FF830C59FD04FFAF2E0C0B0C0BFD04FF350B59%345984FFFF840BAFFD18FF340C59FFFF2E0C83FD05FF2E0C84840B0C0C35%2E5984840B0CFFFF0C0C84FD15FFAF3484FFFF592EA80C34A8FD04FFA80B%83FD04FFA82E2EFD04FF840C0C0B0C0C35FFFFFF590B35FD07FF3459FD18%FF840B59FFFF0C0BA8FD05FF0C0BFFA8FD07FF0C0C0BFFA80C0BFD16FF84%0CFFFFFF0B340B0CA8FFFFFFA8590B84FD04FFA80C2EFD04FF590B0C0C84%7D0C0B592E0C0B34A8FD07FF590CA8FD17FF840C0BFFFF0B0CFD05FFAE0B%34FD09FF2E0B84FF840B59FD14FFAFFF3484FFFFA80C843459AF845F0C34%59FD06FF350CFD04FF590B0C59FFFF840C0C0B0C0C84FD0AFF0C84FD18FF%0B0CAF840C0CFD05FF590C2EFD09FF0B0C7DFF2E0C59FD13FF7D0C842E84%FFFF832EA82E340B34347DFD07FF590BAFFFFFFF590B2EA8FFFFFF0C0C59%8384FD0CFF592EFD18FF340BA8840C59FD05FF830C84FD08FF590C0CFFFF%0C0CFD13FFA80C34340CAFFFFF0C842E0C2E352E340CFD06FF840C84FFFF%FF590B35FD04FF830C2EFD09FFA8FD05FF840CAEFD17FF350C59590C59FD%05FF2E0C84FD08FF340B34FFA80B0CFD12FFA82E59FF0B0CA8FF2E0C0C84%A8FFFFFF0C83FD05FFA80B59FFFFFF840B34A8FFFFFF7D0C0BA8FD06FFA8%590B0C0CA8FD04FF0BA8FD17FF830B59590C84FD05FF340CAEFD08FF0C0C%2EFF7D0C34FD12FF8334FFFF592EAE592E59FD05FF5935FD06FF0C35FFFF%FFA80C34FFFFAFAE590C0CAEFD06FF833459AFFFAF59FD04FF59FD18FF84%0C342E0C84FD05FF0B0CFD06FFA884FF0C0B84FF590B83FD12FF0BA8FFFF%2E340C0C0BFD05FF590CA8FD05FF340CA8FFFFA80B0CA8FFFF340B0C2EAF%FD06FF3435A8FFFFFFA8FD05FF2EFD18FFA80B342E0BAFFD04FFAE0C0BFD%04FFA8350C0BFF0C0C83FF340C83FD11FF8434FFFFFF35580C35FD04FF84%0C35A8FD05FF7D0CA8FFFFFF0C0C0CAFA8590B83AEFD06FFAF2E84FD04FF%AF59FD05FF3583FD17FF840C0C0B0CFD05FFA80B34FFA8340C0B0C59A8FF%0C0BFFFF340BA8FD11FF5959FFFFFF0B5F05A88483340C0C84FD06FFA80C%59FFFFFF340C0B0C0B0C0B0CA8FD06FF832EAEFFFFA8832E0C0BFD05FF59%2EFD18FF0B0C0C0BFD05FFA80C34FF0C2E59AEFD04FF0C0CFFFF0C0CA8FD%0FFF2E843484FFFFA82E59592E352E6084FD08FF352EFFFFFF830C0C0C0B%0C0C0C2EFD0BFF84340C2E0B84FD05FFAF0BAFFD17FF0C0C0B0CFD05FFA8%0B34A8A8FD06FF590C0BFFFF0C0BFD0FFF2E340B3584FFFF5934590B0C2E%340C0CAEFD06FF830BAFFFFFA80C0B0C830C0B350B0CA8FD09FF590C2EA8%FF3459FD06FF3434FD17FF0B0C0C0CFD05FF840C34FD08FF840B34FFFF0B%0CFD0EFF7D34FF592E84FFA80B3459AFFFFFFF8434FD06FFAF0B84FFFFFF%350C2EA8FF590CA8840C59FD07FFA80C3484FFFFFF3484FD06FF840CA8FD%16FF0C0B0B0CFD05FFA80B35FD08FF590C05FFFF0C0BFD0DFFA80C83FF84%2E0CFF0B12A8FD04FFAE0BA8FD06FF2E59FFFFFF590B0C84FFFF830BA8FF%2E0CFD05FF590C0B0C59835959590C84FD07FF0C59FD16FF0B0C0C0CFD05%FFA80C34FD08FF8A0B34FFFF0B0CFD0DFF842EFFFFFF0B0C0C34FD06FF0C%84FD06FF592EA8FFFFAF0B0C84FFFFFF2E0CA8FF350CFD06FFA884595F34%590B3534A8FD07FF840CFD16FF0C0B0B0CFD05FFA80B35FD08FF590C0BFF%FF0C0BFD0DFF2E84FFFFFF0C0C0C8AFFFFFFAE830B83FD06FFA80C59FFFF%FF2E0C59FFFFFF340C0BFFFF590BFD17FFAE0C59FD15FF0B0C0C0BFD05FF%A80C2EFD06FFA8598B0C0CFFFF0C0CFD0DFF0CAEFFFFFF0C2E84FFAEA859%3434A8FD07FF342EFFFFFF7D0C0CFFFFFF590C2EAFFFFF0C34FD18FF592E%AFFD14FF0C0C0B0CFD05FFA80B34FD04FFA8590B597D0C0BFFFF0C0BFD0B%FF7DFF0BFFFFFF832E0B0C0B0C0C5959FD07FFA8590BA8FFFFA80C0B83FF%FF340C34FFFFFF590C34FD19FF0B83FD14FF0B0C0C0BFD05FFA80C0CFFFF%FFA8340C5FFFFF0C0CFFFF2E0CA8FD09FF830C590CFFFFFF5F59AE59340C%2E340C0CFFFFFF84350B0C0C35FFFFFF590B0C83FF840C59FFFFFFA80C0B%FD1AFF590CFD14FF0C0C0B0C84FD05FF0B0CFFFF590C0CA8FFFFFF0C0BAF%FF350B84FD08FFA80C590C0BA8FFFF0B350B5984FFFFFF3459FFFF590C59%FFFFAF2E59A8830B0C0B83FF590CFFFFFFA80C0B59FD1AFF840C7DFD12FF%A80B0C590CA8FD05FF0C0CFF340C59FD05FF0B0C7DFF590C59FD08FF5959%FF593459FF590C34FD05FFA80CA8FFA80C83A8593459FF2E340B0C840C59%FF59FD04FF340B35FD1CFF3435FD12FFA80C2E2E0C7DFD05FF0B0C845984%FD06FF0C0B59FF590B59FD08FF0BAFFFFF0B0C590C12FD05FFA80C59FFFF%3434A80BFFA82E84A80B0C2EFF0B59FD05FF840B2EA8FD13FF2EAEFD07FF%A80BFD12FF840B34830C84FD05FF590C84FD08FF2E0C2EFFA80C2EFD07FF%8359FFFFFF342E0C2EFD05FF843459FFFFFF0CA859A8FFFF5984FF350BFF%840C83FD05FF590C34FD14FF34FD09FF0CA8FD11FF590C59590C34FD05FF%590C59FD08FF590B0CFFFF0B0CAEFD06FF3583FFFFFF2E840BA8FFFFA884%2E0C59FFFFFF590CFF2EFFFFFF8383FF590CA8340BFD06FF830B83FD14FF%0BFD05FF84FFFFFF0BA8FD11FF590B83A80B35FD05FF840B59FD08FF8A0C%0BFFFF340BA8FD06FF0BAFFFFFFF59590C2E590C0C2E84FD05FF840BFF2E%FFFFFF34A8FFAF0C0C0B343484FD04FF590C84FD13FFA835FFFFA8350B84%FFFF8334FD12FF2E0CA8A80C0BFD05FFA80C0BFD07FF0BFF0B0C58FF590C%34FD05FFA80CA8FFFFFF0BAE7D35050C0B0C0B59FD04FF590CFF34FFFFFF%0CFFFFFF2E0B0C0B0C0B84FFFFFF340BFD15FF0C59342E59FFFF842E59A8%FD12FF0C0BFFFF0C0CA8FD05FF0C0CA8FD05FF2E34AF340B59FFA80B34FD%04FF0C352EAFFFFFA834350C59A8A8FFFF5959FD04FF840BFF2EFFFFFF2E%84FFFFA8AEA8FF590C0C59595F0B5FFD15FF8434A8FFAE595F84FD14FFAE%0B34FFFF340B84FD05FF590B83FD04FF2E0C7DFF590C0BFFFF0C0BA8FFFF%59352E2E59FFFF590B59AEFD04FFA80BFD05FF840C838359FFFFAF83FD07%FF830C0B0C0B34A8FD18FF842EAFFD16FF590C2EFFFF590C59FD05FF830C%2EFFFFFF590C84FFFFFF0C0C7DFF590C34FFAE0CA8FF0C0CAFFF0C59FD06%FF2E84FD06FF0C59AF34A8FD0CFFA859AFFD1AFF0B84FD17FF590C84FFFF%A80B2EFD06FF0B0CA8FF340C59FD04FF340B2EFFAE0B0CA88334FFFF590B%590B34FD05FFAF0C35FD07FF350BA8A82E34FD28FF2E84FD17FF0B0C84FF%FFFF0C0BFD06FF340BA8830C59FD05FF590C0BFFFF590B842EA8FFFFA82E%0C0CA8FD04FF840C5FFD07FFAF0C0C2EFFFF8459FD27FF5983FD16FFA80C%0CFD04FF340C59FD05FF590C2EAF59FD07FF0B0C2EFF830C0B0CAEFFFFFF%0B590B8359832E0C2EA8FD08FF0C0C590C34FFFF345984FD25FF840CFD16%FF840B59FD04FF840C34FD06FF0C0CAFFD08FF590C0CFFFF0C0C0BFD04FF%0C7D8434595959358459A8FD06FF2E2E84350C0C7DFF8459AFFD23FFA834%0C0C84FD15FF2E0C7DFD04FFA80C0BAFFD05FF340B83FD07FF847D0C0B59%FFA80B0CFD04FF0BFF84340B343459592E59FD05FF59597D0C0B340C0CA8%FD25FFA834A8AE0BA8FD14FFA80C0BAFFD05FF2E0C7DFD05FF840C0CFD07%FF0CA82E0C0BFFFF350BFFFFFFA80C352E7DFD05FF0CAFFD06FF842E0B5F%FFA80B84FFFFFFAEAFFD1FFFA859FFFF0C34FD15FF840C35FD06FF840B34%FD06FF0B0C83FD05FF590CA8FF0B0C2EFFA80C59FFFF840B34AEFD05FF2E%35FD06FF590C0B83FFFFFF340BA8FF840BFD1EFF842E84FFFFFF340BAFFD%14FF0C0C59FD06FFA80C0CAFFD05FF590C35FD04FFA83459FFFF590C0C83%FF2E0CFFFF2E34AFFD05FF842EA8FD04FFAF2E0C2EAFFD04FF2E0C0B340C%0CAFFD1FFFAF5984FF8434FD14FFA80C0BFD08FF2E0C34FD05FFA80C0BA8%FFFFFF590BFD04FF0C0B2EFFFF0B592E0C60FD05FF590CA8FFFFFFA8590B%2E7DFD06FF0C34340B0C0B59FD20FFA8830C0CA8FD14FF590B59FD08FFAE%0C2EFD06FF590C34FFFFFF0B5FFD04FF840C0B83FFA80B2E0CFFFFFFAF84%0C35A8FD04FF593484FD08FF0C84FF840C350B84FD21FF3459FD15FF0C0C%84FD09FF340B84FD06FF0B0C84FF590CA8FD05FF2E0C0B8BFF590B0C0C34%0B0C3484FD11FF0C59FF840C59840B84FD1FFFA80BFD15FF590C0CFD0AFF%7D0C0CFD06FF590C34FF3459FD05FFA8FF0C0C0BFF340C0B59A8A8FD14FF%2E59FFFF0B59FF840B84FD1EFF5959FD15FF340B84FD0BFF0B0C7DFD05FF%A80C0B8383FD06FF592EFF0B0C0B0C0B0C0B84FD15FF590BFFFF590BFFFF%840B59FD1DFF590BFD14FF840B0CA8FD0BFF840C34FD06FF590C0CFD07FF%2E59FF8A0B0C0C84830C0C84FD14FF590CAFFF830CA8FFFFA80C59FD1CFF%590CFD14FF2E0C59FD0CFFA80C0B84FD06FF0C0C2EFD05FFAE0C59FFFF35%0B0CFFFF7D0C0B84FD13FFA80BA8FFFF0B59FFFFFF840B2EA8FD1AFFA80B%FD13FF590C0BFD0EFF590C0CFD06FFAF0C0C84FD04FFA80CA8FFFF0C0C58%FFFFFFA8350C84FD13FF0C59FFFF352EFD04FFAF0C2E83FD19FF840CA8FD%12FF2E0B84FD0FFF0B0C59FD06FF590B0CA8FFFFFF590CFFFFA80C0BFD05%FFA8340B59FD12FF0C34FFFF590CA8FD04FFAE2E0C2EFD18FF590BFD12FF%590B2EFD10FFAE0C0CA8FD06FF340B59FFFFFF5934FFFFAE0C59FD07FF35%0B84FD11FF592EFFFFAE0BAEFD06FF340C2EAEFD16FF2E59FD12FF0C0C84%FD11FF350B34FD06FFA80C0B59FFFF0B83FFFF590C59FD07FFAE0C0BFD11%FF590CFFFFFF0C59FD07FF590C0B59A8FD13FF340CA8FD11FF0C0C2EFD12%FFA8340C84FD06FF840C0B84A80C84FFFF840B84FD08FF830C59FD10FF84%0CFFFFFF2E35FD08FFA8590C2E59FD10FFAF2E0C83FD11FF590C0BFD14FF%590C0BA8FD06FF340C0BAE7DFFFFFF590C59FD09FF0B34FD10FF590CA8FF%FF350BFD0AFFA82E0C0B59A8FD0BFFA8590B2E84FD11FFA80C0B83FD15FF%340C2EFD07FF2E0C0CAFFFFFFF840B84FD09FF0C0BFD0FFFA8340CFFFFFF%590CFD0CFFA8590C0C0C5959A8A8AFA8AE7D5F2E0C0CA8FD13FF350C59FD%17FF0B0C34FD07FF0C0C0CFFFFFF830C2EFD09FF0B0C84FD05FF83832E35%2E342E352E0C0B35FFFFFF830BFD0FFF592E0B0C0B0C0B0C0B0C0C5984FD%14FF590B0CA8FD17FFA80C0C83FD06FFAF0B0C2EFFFFAF0C2EFD08FFA80C%0CFFFFAF352E0B0C0C0C0B0C0C0C0B0C0C59A8FFFFFF340CFD10FF5959A8%AFA8A884AFFD17FF840C0C84FD19FF590B0CA8FD06FFA80B0C2EAFFF0C0B%A8FD07FF590B34FFFF59345984A8FD0EFF2E0BFD10FF5959FD1CFFA80B0C%59FD1BFF590B34A8FD07FF0C0C0CFF590C59FD06FF590B0C84FD14FFAE0B%5FFD10FF0CAFFD1BFFAF0C0C34FD1CFFAE340B34AEFD06FFAF0B0C0B840B%0CA8FD04FF590B0C0B83848359352E342E352E342E83598359A884A87D59%0B0C59FD0FFF840CFD1CFF2E0C0CFD1EFFA82E0B35FD08FF2E0C0B0C0C59%FFFFFF590B0C0C0C0B0C0C0C0B0C0C0C0B0C0C0C0B0C0C0C0B0C0C0C0B0C%0C34FD0FFF840BFD1BFF2E0C0CFD20FFA80C0B34A8FD07FF2E0C0B0C0B84%FFFF0B0C2E2E0B0C0B590B0C7DA8840C0B84FFFFA8590B0C0C352E34590C%0BA8FD0EFF3434FD1AFF2E0C0BAEFD21FFA8340C35FD08FF59FD040CFFA8%0C34FF340CA8FFFF0C0BFFFFAE0B0CFD04FFAF0C0BFD05FF340C59FD0EFF%5934FD19FF2E0C0CFD24FFA80C0B34A8FD07FF830C0B0C0CFF0B34A80C0B%FFFFFF0B34FFFF840C0CFD05FF2E0C7DFD04FF350B83FD0EFF2E0CFD18FF%0C0C0BA8FD25FFA8340C34A8FD07FFA8350C0C2E840C0C0B0CFFFF840C34%FFFF840C35FD05FF840C2EA8FFFFFF0B0C84FD0EFF590CFD16FFAF2E0C0B%AFFD27FFA80C0B0CA8FD08FF830B0C84FF590C0BFFFFA80B35FFFF590C2E%FD05FFA8340B0C59832E0C0BFD0FFF2E0C84FD14FFA80B0C0BA8FD29FFA8%350B0C84FD09FF59FFFFFF0C0C84FFA80C0CFFFFAE0C34FD07FF590B0C0C%0C2EFD10FF840C84FD13FF840B0C2EAFFD2BFFAE340B0C59FD0CFFA80B0C%A8FF0B0CAEFFA80C0BA8FD07FF840B59A8FD11FF830C2EFD11FFA8590B0C%2EFD2FFF5F0B0C2EAFFD0BFFAF2E0C0C0C0BA8FFFF0B0C59FD07FF840C84%FD13FF0B0CA8FD0FFFA8340B0C59FD31FF840B0C0B59FD0CFF7D590B0C0C%FFFF590B0CA8FD05FFA80C0BFD14FF590B59FD0EFF590C0B0C83FD34FF34%0C0B35A8FD0DFF590C2E84340C0C3583AFA8AE59340C0CA8845984595934%5934590C0C0B0C0C35345F83AEA80C0CAEFD0BFFAF2E0C0C59A8FD36FF59%0C0B0C59FD0DFFA8592E342E352E0C0B0C0B342E352E342E352E342E352E%342E352E0C0B0C0B0C0B0C0B0C0B0C59FD09FFA8590B0C0B84FD39FFAE35%0B0C0C84FD13FFA884FD15FFAEA8848459352E84FD08FF832E0B0C34FD3D%FF840B0C0B2E7DFD36FF840B0C0B2E83FD40FF592E0B0C2E84FD32FF8334%0B0C0C84FD43FFAE830B0C0B0C34AFFD2CFFA8590B0C0B0C59FD48FF7D34%0C0C0B3583FD27FFAE842EFD040C84FD4CFFA8340C0B0C0B3459AEFD20FF%A8830C0C0B0C0B5984FD50FFA8842E0C0B0C0C345984A8FD18FFAE7D5F2E%0C0B0C0C357DFD56FFA8842E0C0B0C0B0C0B342E8383A884FD0AFFA88484%59590C0C0B0C0B0C0B5959FD5DFFAF59350B0C0C0C0B0C0C0C0B0C0C0C0B%0C0C0C0B0C0C0C0B0C0C0C0B34348484FD64FFA8A859592E350B0C0B0C0B%0C0B0C0B0C0B0C2E34598384AFFD33FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k([Passermarken]) Pc([Passermarken]) Pc1 0 0.47 0.3 (PANTONE 328) 0 x(PANTONE 328) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Ebene 1) Ln0 Au*u0 O1 0 0.57 0.3 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR227.4336 422.7266 m227.4336 461.3242 258.8335 492.7266 297.4341 492.7266 c336.0313 492.7266 367.4341 461.3242 367.4341 422.7266 c367.4341 384.125 336.0313 352.7222 297.4341 352.7222 c258.8335 352.7222 227.4336 384.125 227.4336 422.7266 cf1 D225.4175 422.7266 m225.4175 383.0151 257.7222 350.7104 297.4341 350.7104 c337.1436 350.7104 369.4492 383.0151 369.4492 422.7266 c369.4492 462.4326 337.1436 494.7388 297.4341 494.7388 c257.7222 494.7388 225.4175 462.4326 225.4175 422.7266 cf*Uu*u0 D344.7485 411.0122 m342.7886 409.188 340.0107 409.1587 337.7617 407.6787 C336.73 406.6475 336.9912 405.4751 337.4126 404.1763 C338.2437 402.5308 337.9292 402.7012 336.7671 402.3135 c334.0522 401.4092 334.083 398.4395 330.8179 398.9375 C330.6328 398.8823 329.8687 399.2637 330.3198 398.7163 c330.6709 398.2988 330.8179 398.5498 331.5098 398.4668 C332.6724 398.4116 333.105 398.8911 333.9224 399.4458 C335.0874 400.4263 334.9482 400.7944 336.3799 401.4834 C336.7241 401.564 337.5693 401.8154 338.0396 401.6494 C338.3584 401.3569 338.3672 401.3491 338.4185 401.0869 C338.2334 400.291 337.0718 399.6299 336.6289 399.353 C337.2388 398.9053 338.3823 398.1499 338.1973 397.5171 C337.9346 397.1011 337.9487 397.0313 337.4868 396.8066 c336.8403 396.4937 335.5493 396.541 334.332 397.4429 C334.147 397.3872 333.9448 397.8027 333.4229 397.3081 C334.6089 396.0879 336.269 396.3643 336.5181 396.1152 c336.7671 395.8662 335.6313 394.3926 335.5796 394.0757 C334.7842 391.9595 335.7607 390.0103 335.3345 387.8125 C335.0728 386.0933 334.5586 385.2754 333.0532 384.1919 C330.2915 382.2798 328.355 381.7261 325.2563 381.228 C317.1299 380.6733 312.0029 383.4614 306.1519 387.8315 c300.2998 392.2017 298.0625 394.5264 296.2354 396.9863 C296.209 397.9927 296.9487 398.7573 296.3159 399.8457 C295.7876 399.6606 295.8398 398.9727 295.521 398.5732 C295.0703 397.9365 293.9863 397.4634 293.2168 397.541 C290.8096 398.3618 290.6758 401.1924 289.1704 402.8081 C285.9414 405.9854 285.0391 410.564 286.7622 414.3999 C287.3687 415.5918 288.4526 416.7305 289.6733 417.1519 C291.1787 417.3921 292.9546 417.3921 293.9351 415.9355 C295.0962 414.8257 295.814 413.0244 296.1021 411.438 C296.5796 410.668 295.9985 409.7954 296.79 409.1587 C298.1655 409.0298 299.356 408.6855 300.6807 409.5283 C301.6616 409.3999 301.7944 408.312 302.5347 407.8384 C303.8589 407.0435 L305.2598 406.4629 307.0615 406.4629 308.2529 407.4951 C310.4756 409.7695 309.9902 412.1104 310.7563 414.6221 C312.8765 416.501 314.2856 419.1899 314.2593 421.813 C314.1265 423.4258 313.5459 425.0938 312.5908 426.7061 C312.7505 427.6602 313.2788 428.374 313.5972 429.2222 C313.8633 429.3809 314.2075 429.3809 314.4966 429.4326 c316.8525 429.9355 318.998 432.0806 319.9229 434.3296 C320.1333 434.54 L322.833 434.7251 326.1953 435.6797 327.7568 438.5132 C328.0742 439.73 329.4507 438.8311 330.2974 439.1196 C331.7251 439.2007 333.1567 439.9922 334.2407 440.9204 C334.5586 441.0278 334.7949 440.6802 334.9839 440.5249 C335.6167 438.4053 336.7822 436.3677 337.4434 434.2222 C338.2646 432.6094 338.5576 431.0747 338.2646 429.4326 C338.6089 426.9204 340.0376 424.5649 341.043 422.0234 c342.0493 419.3491 343.6094 416.6489 344.7485 413.8975 C344.96 412.7876 345.4365 411.9106 344.7485 411.0122 Cf1 D345.2998 415.6323 m343.395 420.0264 341.2534 423.8096 339.6885 428.2305 C338.5786 429.8174 339.2153 431.5107 339.0825 433.2056 C338.3682 435.8535 337.2544 437.8916 336.1973 440.458 c335.9048 441.1978 336.7261 441.4121 337.0181 441.9375 C337.4951 443.2363 337.1514 444.6938 336.5669 445.9365 C336.3301 446.6499 337.1777 447.1533 337.0181 447.8931 C336.9888 449.0317 335.9868 449.8013 335.1909 450.4087 C334 452.1284 333.4458 453.0308 331.9619 454.5913 C331.9619 454.8838 L332.7017 455.5425 333.3125 456.6812 333.2861 457.6611 C332.9941 458.771 332.7573 459.8032 331.6948 460.5728 C330.0049 461.5264 328.2852 460.0435 326.9355 459.2744 C326.562 459.0122 326.377 458.7451 325.8477 458.7974 C325.5054 458.9194 325.1509 459.0464 324.79 459.1758 C324.4443 458.7817 324.0156 458.3643 323.4893 457.9473 C325.1333 457.2808 L325.1929 457.2358 325.2153 457.2031 325.2153 457.1475 c325.2153 457.1177 325.2046 457.0659 325.1968 457.0215 C325.082 456.9224 321.3906 453.6855 Y321.3799 453.6782 314.7368 447.1133 Y314.7368 447.1089 312.8315 445.1777 Y312.8208 445.167 306.9175 438.3647 Y303.8291 434.7837 299.2681 428.9067 296.5234 424.606 C295.0962 422.6372 293.6714 420.4512 292.3438 418.3838 c292.2002 418.1543 291.9292 418.1729 291.501 418.2246 c291.2085 418.2578 290.9087 418.2881 290.6382 418.1958 C290.646 418.1958 290.6499 418.1958 Y290.5903 418.1802 L290.6055 418.1846 290.624 418.1885 290.6382 418.1958 C289.1372 418.0288 288.0464 417.5293 286.8774 416.4717 C285.3608 414.6851 284.5986 412.521 284.5986 410.1875 c284.5986 408.582 284.9648 406.8911 285.7007 405.1934 C285.3906 404.2837 284.6763 403.481 284.0366 402.771 C283.6812 402.3711 L283.2266 401.9238 L282.9307 401.6426 282.5938 401.3252 282.3496 401.0142 C282.3276 400.9854 L282.3125 400.9473 L282.2827 400.8481 282.2686 400.6592 282.561 400.519 C282.6304 400.4814 L282.7085 400.5005 L284.1074 400.833 284.9878 401.8833 285.8413 402.9004 C286.3784 403.5186 286.4556 403.6108 V286.5811 403.6333 286.6851 403.563 286.8701 403.4067 c286.9658 403.3262 287.0767 403.248 287.2026 403.189 C287.2026 403.1602 287.2026 403.1187 Y287.1836 402.667 287.1802 402.564 V283.8696 399.2944 281.1733 397.4487 277.6489 395.3774 C277.0605 395.0327 L277.7407 394.9629 L279.1167 394.8262 280.4224 395.5991 281.6841 396.3467 C283.2007 397.1821 L284.6021 397.9004 285.9009 398.9946 287.1616 400.0532 C288.3013 400.999 288.4233 401.0991 V288.5415 401.0811 288.6748 400.9287 288.7783 400.8066 C288.853 400.7261 288.9009 400.6738 V288.9233 400.6338 289.958 398.584 290.021 398.4619 C289.7842 397.4893 289.6807 396.5166 289.6807 395.5439 c289.6807 393.4243 290.1396 391.3164 290.5903 389.2524 c291.0342 387.2178 291.4932 385.1162 291.4932 383.0527 c291.4932 382.9155 291.4897 382.7827 291.4858 382.6455 c291.4858 382.0098 290.7866 381.1631 290.2061 380.8965 C288.8818 380.6704 287.2842 380.6558 285.5898 380.6411 c283.5151 380.6226 281.3662 380.6035 279.7163 380.1567 C279.1836 380.0933 278.5698 379.9199 277.9741 379.7534 c277.3896 379.5908 276.7866 379.4204 276.2246 379.3428 C276.1689 379.3354 L276.1055 379.2871 L275.9028 379.147 L275.7144 379.0288 275.4814 378.8843 275.4253 378.6064 c275.4219 378.585 275.4185 378.5586 275.4185 378.5327 c275.4185 378.3735 275.4922 378.2002 275.6104 378.0781 c275.7251 377.959 275.8691 377.9043 276.0176 377.9189 C276.5166 377.9189 277.0747 378.1216 277.6191 378.3184 c277.9966 378.4546 278.3921 378.5996 278.7544 378.6621 c282.2021 379.2505 285.9814 379.1323 288.5415 378.9248 C289.8066 378.9468 291.8813 378.9878 292.6284 380.7817 C292.8989 381.5107 292.9912 382.1875 292.9912 382.8384 c292.9912 383.5557 292.8804 384.2476 292.7656 384.9575 C292.54 386.7036 L292.3882 387.7681 292.1626 388.8301 291.9443 389.8589 c291.5566 391.6865 291.1567 393.5649 291.1567 395.4663 c291.1567 395.8506 291.1787 396.2393 291.2119 396.6274 C291.249 396.6758 291.2891 396.7344 291.3384 396.7422 c291.4497 396.7568 291.645 396.6016 291.8008 396.479 c291.978 396.3389 292.1587 396.2051 292.3589 396.1538 C292.5879 395.9805 292.8472 395.9321 293.0835 395.9019 c293.4131 395.8574 293.5903 395.8174 293.6943 395.562 C293.8423 393.8901 294.4194 392.1626 294.978 390.4912 c295.3623 389.3403 295.7622 388.1499 296.0176 386.9883 c296.4722 384.9541 296.9307 382.8901 296.9307 380.8555 c296.9307 379.646 296.7681 378.4443 296.3428 377.2646 C295.458 375.6548 293.5239 375.6479 291.6558 375.6401 C291.0977 375.6401 L286.5186 375.9175 L282.5898 376.2031 278.5288 376.4941 274.3647 375.8213 c274.3936 375.8252 273.4321 375.7217 Y272.9175 375.6436 272.4331 375.5811 271.9121 375.7031 C271.7192 375.8589 271.5635 376.1284 271.5635 376.4092 c271.5635 376.498 271.5786 376.5908 271.6157 376.6797 c272.3594 378.3218 272.7334 379.8052 272.7334 381.1182 c272.7334 382.1836 272.4883 383.1348 272 383.9702 C270.9238 386.0342 269.7407 387.4648 268.2798 388.4644 C266.4912 390.2539 264.9624 391.8394 263.604 393.3843 C262.8096 393.4839 262.3208 393.6416 262.2681 393.6587 C262.0913 393.7192 L261.2964 392.7397 L262.3281 391.7598 263.2817 390.7793 264.4468 389.7222 C266.2192 388.7676 267.6509 387.0474 268.9199 385.8823 C270.4546 384.085 270.8242 382.1792 270.5059 380.0605 C270.2954 377.5488 267.9946 376.4614 266.4302 374.7935 C265.7979 373.6016 265.3984 372.1743 266.271 371.0615 C266.8301 369.5815 269.208 369.8486 269.5005 368.6274 c270.1548 365.9385 274.8193 364.3848 275.729 364.3218 c276.6348 364.2588 277.5747 363.2568 Y279.4277 361.9067 281.8618 362.2319 283.1411 362.4277 c284.417 362.6206 286.7036 361.5889 288.1343 361.7993 C290.2764 362.6465 292.0259 362.2505 294.2485 362.4355 C301.2354 362.3281 309.1738 362.4873 316.3198 361.5889 C317.6436 361.7476 319.231 360.7153 320.4775 361.3481 C320.7949 361.8804 320.5552 362.3281 320.4775 362.7798 C317.063 368.1499 316.5522 374.1792 318.4878 380.0308 C319.7773 379.9556 L324.4121 379.4521 328.6274 380.0527 333.3359 382.7778 c335.6919 384.0762 336.9297 387.1108 336.8228 389.3081 c336.7446 390.7358 336.2495 392.4219 336.4893 393.9312 C336.5723 394.605 337.0181 395.6274 337.5972 395.9492 c337.8462 396.0879 338.7144 396.6763 338.9858 397.4297 c339.4336 398.6543 338.4736 399.2324 338.1973 399.3989 C338.9443 399.7031 339.6689 401.2324 338.9805 402.4243 C338.5376 402.8945 338.0239 404.7534 337.9688 405.3633 C337.8101 406.2368 337.7837 407.1357 338.6055 407.6943 C340.4585 408.6704 342.2041 408.9111 344.1348 409.7578 c345.459 410.313 346.1465 411.6885 346.0952 412.9321 C345.2998 415.6323 Lf0 D269.6372 371.9932 m269.3999 371.5684 269.4336 371.2837 269.3262 370.772 C269.1973 370.5396 268.5347 370.854 268.3242 370.9839 C267.5024 371.4277 267.5581 371.2017 267.3213 371.9639 C267.1885 372.4741 267.2036 373.0737 268.0503 373.5171 c268.5791 373.8169 269.6372 374.1758 269.9805 373.5171 C270.0884 373.0737 269.5596 372.5005 269.6372 371.9932 Cf274.1533 366.2744 m273.0688 366.249 272.3076 366.8408 271.8047 368.1201 C271.2974 369.748 271.1274 371.1865 271.4785 372.8618 C271.5903 373.0737 271.8301 373.2095 271.9858 373.1406 C273.4985 373.6543 L274.0059 373.8613 274.4194 373.9316 274.9043 373.8169 C275.2114 373.5137 L275.1885 372.6289 274.9707 371.9785 274.9487 371.1611 c274.8599 369.1118 274.686 368.501 275.2778 366.5488 C275.0591 366.0347 274.623 366.2822 274.1533 366.2744 cf336.3486 442.4038 m336.2007 442.249 336.0156 442.0562 335.7681 442.1226 C335.2061 442.5146 335.4199 443.0146 335.4541 443.4878 C335.5688 443.6021 335.5864 443.6689 335.7681 443.6689 C336.0347 443.7139 336.1826 443.5171 336.2817 443.3765 C336.4487 443.0698 336.4673 442.7222 336.3486 442.4038 Cf293.4023 417.6177 m297.1084 424.2612 301.6099 430.0313 306.4258 435.9604 C313.1748 443.6318 L317.9912 448.7695 323.311 454.0366 329.2139 458.1089 C329.9531 458.5347 330.2788 459.4038 331.0444 458.793 C331.7397 458.1533 L332.2065 457.6245 331.7993 456.123 331.3218 455.7012 C330.9414 455.3906 330.5713 455.0835 330.2046 454.7803 C331.356 453.6411 333.0156 451.4736 334.3809 450.0713 c334.9805 449.4536 334.7949 448.814 335.8687 448.3145 c336.4048 448.0625 336.5562 447.4785 336.2378 446.9761 C335.2866 445.7588 333.7002 445.9438 332.4536 445.6255 c327.8237 444.5938 324.0801 443.2695 318.957 440.7837 C314.855 438.6128 311.5742 436.2051 308.6069 432.4727 c307.4722 431.0708 306.1997 430.0098 305.2495 428.3188 C302.5488 424.8491 300.4043 421.5947 298.2583 418.022 C297.4927 416.897 297.2412 416.3389 296.1685 415.3208 c295.6475 414.8257 295.1816 415.8608 294.8555 416.2202 c294.8184 416.2607 294.7964 416.3052 294.7705 416.3452 C294.6592 416.3315 294.5449 416.353 294.4341 416.4272 C294.1455 416.7974 293.2432 416.9565 293.4023 417.6177 Cf334.2261 443.2808 m334.1553 441.9971 332.4429 440.936 331.0112 440.5396 C330.4014 440.4438 329.8389 440.48 329.2988 440.48 C329.1587 440.5806 328.9956 440.6992 329.0176 440.8364 c329.1099 441.4463 329.2065 441.8013 329.251 442.3521 C329.6055 442.6113 L330.8706 442.8657 332.417 443.1396 333.6855 443.4771 C333.8745 443.436 334.1074 443.4546 334.2261 443.2808 Cf320.9248 439.9404 m321.1543 440.2329 L322.1895 440.7246 323.1553 441.1055 324.3057 441.4385 C325.6851 441.7974 L326.0508 442.1299 326.6948 442.3999 327.0649 441.9302 C327.0874 440.144 325.752 437.9985 323.7769 437.1743 c323.1553 436.9038 322.3267 436.8149 321.5908 436.6343 C321.4058 436.7925 320.8062 436.4561 320.625 436.9038 C320.7397 437.7993 321.0845 439.1377 320.9248 439.9404 Cf306.7954 408.271 m306.4258 408.0571 303.2266 409.2773 303.5996 408.9375 C302.8413 409.7578 304.0806 410.0356 301.2578 411.0933 C300.5737 411.0234 L300.4849 410.9419 300.2368 410.8159 299.9819 411.1675 C299.9556 411.5928 300.5146 411.5303 300.6919 412.0591 C301.7021 414.334 301.1475 416.0947 301.0469 418.4502 C301.7944 420.3813 L303.2114 422.0898 303.2075 422.3345 304.1689 423.2627 C305.1304 424.6128 305.3306 424.7158 306.6177 425.8257 c306.8286 426.0068 307.2173 426.1514 307.4683 425.937 C308.0757 425.4639 308.1084 425.1528 308.2861 424.5459 C308.5894 422.2935 307.2275 420.751 305.5859 419.5342 C304.4204 418.5283 303.311 416.9673 303.5625 415.4321 C303.6621 415.3281 L304.1948 415.7764 304.8643 416.0391 305.0898 416.5938 C305.9775 418.5762 308.3672 419.4785 309.7065 421.1978 C310.2866 422.23 309.9321 424.021 309.7065 425.2119 C309.6992 425.1782 311.4595 426.0444 310.9819 425.7334 C311.8184 425.3892 311.7148 424.7896 312.1182 424.0254 C312.9023 422.0381 312.8354 420.2441 311.6226 418.5244 C308.2861 414.3638 L308.2339 412.2432 308.8179 409.5146 306.7954 408.271 cf311.1968 428.4067 m310.3945 428.0381 309.5693 427.9565 308.6816 428.3667 C308.4561 428.6738 307.7231 428.9224 308.0127 429.373 c308.6563 430.416 309.7471 431.2778 310.4165 432.3027 C310.7271 432.4688 L312.085 434.1074 314.2227 435.48 316.2495 436.7119 C317.4741 437.2446 L317.7407 437.5103 318.3657 438.0649 318.6089 437.4922 C318.6538 435.3574 317.751 433.0757 315.7163 431.5664 c314.4814 430.6533 313.9526 430.8306 312.8506 430.7637 C312.2842 429.7388 L312.1509 429.2285 311.707 428.7144 311.1968 428.4067 Cf299.9673 416.2271 m299.9116 414.7183 L299.7749 413.3423 299.1382 411.7554 297.8442 410.9863 C297.0708 411.1709 297.3481 412.0996 297.1563 412.7319 C297.6519 414.1079 298.6177 415.2471 299.4165 416.4639 C299.5239 416.5454 299.6343 416.5972 299.7451 416.5454 C299.9673 416.2271 Lf281.5396 363.7524 m281 363.1978 280.6968 363.4565 280.1489 363.4048 C278.5918 363.8267 277.6709 364.5029 277.2305 366.2676 c276.6606 368.7271 276.6792 371.4312 277.2305 373.9424 C277.4819 374.1387 L278.5767 374.2642 280.2344 374.4863 280.6851 374.2388 c281.1333 373.9902 280.2002 369.5664 Y280.1714 368.6899 280.6011 366.4448 281 365.2798 C281.0845 365.1064 281.98 364.207 281.5396 363.7524 cf292.8394 366.4854 m292.6729 364.9063 290.6909 363.5151 289.7212 363.2344 c288.7485 362.957 285.8457 363.0942 285.0093 363.3828 c284.1772 363.6704 282.1392 367.6514 282.376 369.7188 C282.376 371.4238 282.835 374.1309 283.5186 374.3496 c284.2031 374.564 286.0151 374.4531 Y286.7739 374.5044 287.3462 374.3237 288.0127 374.2456 C288.4863 374.064 288.1533 373.4692 288.3193 373.1323 C288.5342 372.252 288.5825 371.2974 289.1294 370.4175 C289.8911 368.9414 291.2935 368.061 292.6729 367.5435 C292.9844 367.2593 292.8135 366.874 292.8394 366.4854 Cf290.6128 373.165 m290.6128 373.4839 290.6313 373.6133 290.8726 373.7163 C292.1812 373.7163 L293.3428 373.6763 294.8374 373.2954 295.9248 374.4204 C296.5498 374.3975 296.605 373.6543 296.771 373.0811 C296.9194 372.2773 296.8828 371.7676 296.8828 371.0464 C296.6235 370.4771 296.3315 369.6074 295.7397 369.2446 C294.8003 368.8008 293.8564 368.8862 292.9546 369.2446 C291.5898 370.0513 290.5952 371.3423 290.6128 373.165 cf317.4106 379.4131 m315.6611 373.3511 314.8291 370.2251 317.5591 363.978 C317.585 363.7407 317.8472 362.9683 317.5591 362.8647 C314.5405 363.4707 313.7383 363.7305 310.9053 363.9409 C308.2861 364.3921 303.936 363.6636 301.0249 363.6895 C298.751 363.6123 296.4463 363.5342 294.0635 363.2422 C293.3501 363.6123 293.9043 364.4072 293.9604 364.936 C294.2231 365.7568 294.2485 366.1787 294.3306 367.1323 C294.7002 367.5283 295.1519 367.3179 295.5996 367.5029 C297.1338 367.7393 298.4326 369.0898 298.8022 370.5215 C299.2793 372.0264 298.751 373.6943 298.0625 375.126 C297.9287 375.5479 297.3481 375.8657 297.585 376.2871 c299.4644 379.8091 298.1401 383.3818 297.5078 386.8223 C296.8452 389.2593 295.8398 391.9561 295.4404 394.5264 C295.521 394.7891 295.1772 395.3994 295.7578 395.4512 C295.9727 395.3994 L297.9805 392.9619 303.7402 387.8076 305.8975 386.1333 c308.0537 384.4595 313.6235 381.2109 317.248 380.3379 C317.5923 380.0498 317.5405 379.8091 317.4106 379.4131 Cf*UU332.7056 432.1069 m333.0752 431.6299 333.3149 431.2075 333.0234 430.7563 c332.3354 430.7046 332.229 431.5776 331.647 431.8701 c330.6934 432.3428 329.8467 431.8403 328.8955 431.603 c326.4878 430.5713 324.4756 428.5073 322.145 427.4238 c321.8569 427.4238 321.5908 427.4497 321.4058 427.6602 c321.8018 428.0562 322.437 428.1377 322.9404 428.4561 c325.3491 430.0425 327.6787 432.5278 330.6934 432.98 c331.4888 433.0308 332.2031 432.7432 332.7056 432.1069 cf*u1 D332.52 428.0303 m332.3354 428.6143 332.3613 429.5659 331.647 429.6982 C331.4888 429.3286 331.647 428.9287 331.4888 428.5854 C331.2773 428.3228 330.9072 428.0049 330.4824 428.1118 C327.5708 427.9268 325.4004 425.356 322.915 424.0356 c322.0674 423.5591 321.1133 423.2925 320.2144 423.0552 C320.1333 422.9224 320.1626 422.7373 320.2915 422.6597 C323.0474 422.3672 325.77 422.1016 328.5 421.813 C331.54 422.1567 L331.6216 422.5527 331.1445 422.8965 331.2222 423.3477 C331.5698 424.5903 331.6738 425.9404 331.3296 427.1055 C331.5698 427.7383 332.4688 427.2642 332.52 428.0303 Cf0 D330.3936 423.3296 m330.02 422.7778 329.4287 423.2593 328.9067 423.1929 C327.7163 423.3296 325.7031 423.0518 324.3901 423.2144 C324.1914 423.3296 324.0435 423.5366 324.165 423.7217 C324.3647 424.0464 324.9121 424.0688 325.2598 424.3237 C326.6982 425.2227 328.2109 426.0776 329.8501 426.4692 C330.1465 426.5137 330.3936 426.2622 330.4448 426.0547 c330.6416 425.2935 330.5195 424.0688 330.3936 423.3296 Cf*U*u334.0591 414.3867 m334.1563 414.5249 334.2671 414.6821 334.397 414.6953 C334.5708 414.6313 334.6616 414.5493 334.6855 414.2305 C334.6641 413.7197 334.5342 413.1831 334.396 412.6138 c334.2388 411.9663 334.0776 411.3047 334.0776 410.6563 c334.0776 410.3682 334.1099 410.0835 334.1865 409.8032 C334.5703 409.3267 335.1606 409.2183 335.8691 409.4614 C335.8823 409.4678 337.0752 410.1514 Y338.1118 410.772 339.0913 411.3569 340.9063 411.8193 c340.9512 411.8311 340.9614 411.8169 340.9688 411.8086 c340.9961 411.7759 341.0093 411.708 341.0093 411.6226 c341.0093 411.4673 340.9639 411.2544 340.8887 411.0815 C340.8198 411.0503 339.1416 410.3022 Y337.8208 409.7246 336.4541 409.127 335.1738 408.3931 C334.7949 408.3164 334.4448 408.52 334.1079 408.7183 C334.0249 408.7671 L333.5381 409.4331 333.3809 410.0791 333.3809 410.7246 c333.3809 411.3042 333.5068 411.8828 333.6372 412.478 c333.7583 413.0313 333.8813 413.6045 333.9092 414.2051 C333.9517 414.2554 334.0591 414.3867 Yf*U292.8218 414.9287 m293.7754 412.9727 292.769 411.1196 292.8218 409.0811 c292.98 408.5005 294.1196 408.4189 293.7754 407.7314 c293.5088 407.5464 293.1387 407.4951 292.8472 407.7056 c292.3184 408.0498 292.1333 408.312 292 408.9224 c291.8667 410.7202 293.2983 412.814 292.0259 414.5073 c291.6558 414.8774 291.1274 415.2471 290.5981 415.2729 c289.459 415.0625 288.8784 413.8452 288.4829 412.9468 c287.8726 410.564 287.7129 408.0498 289.8027 406.1445 c291.0234 405.4302 292.5029 404.6611 292.584 403.126 c292.769 402.8604 293.1387 402.5972 293.4312 402.7563 c293.8013 402.7817 293.853 403.8403 294.3823 403.3374 c294.541 402.9668 l294.4077 402.5454 294.2778 401.8018 293.5903 401.7764 c293.2461 401.6982 292.873 401.8833 292.584 402.0938 c291.8408 402.8604 292.4253 404.0254 291.1787 404.5278 c289.1152 405.1646 287.7651 407.3354 287.5537 409.374 c287.4209 411.3301 287.502 413.4751 289.1958 415.1953 c289.8584 415.6992 290.7319 416.0166 291.5781 415.7505 c292.0557 415.6724 292.6099 415.3281 292.8218 414.9287 cfuu*u1 D1 XR266.9468 400.6157 m263.1782 398.8672 262.0278 394.3794 261.9795 394.188 C261.8794 393.7915 L262.2681 393.6587 L262.416 393.6108 265.9155 392.4634 270.1836 394.561 c274.4893 396.6729 275.373 400.9346 275.4097 401.1157 C275.4985 401.5669 L275.043 401.6401 L274.8657 401.6704 270.646 402.332 266.9468 400.6157 cf0 D267.3203 399.8062 m270.0728 401.082 273.2168 400.9346 274.4004 400.8198 C274.063 399.728 272.9209 396.8955 269.791 395.3594 c266.6509 393.8213 263.9614 394.188 262.978 394.4019 C263.3408 395.4897 264.5571 398.5225 267.3203 399.8062 Cf*U*u1 D270.7031 409.0762 m266.9272 407.3716 265.5327 402.9248 265.4771 402.7368 C265.3477 402.3115 L265.7695 402.1816 L265.917 402.1338 269.4053 401.0942 273.689 403.144 c278.0122 405.2114 278.9297 409.3281 278.9663 409.502 C279.0586 409.9531 L278.6079 410.0342 L278.438 410.064 274.417 410.7524 270.7031 409.0762 cf0 D271.0698 408.2627 m273.811 409.502 276.8022 409.3423 277.9502 409.2212 C277.5977 408.1558 276.4292 405.4409 273.3037 403.9463 c270.1895 402.4595 267.5181 402.7402 266.4976 402.9321 C266.9312 404.042 268.3105 407.0161 271.0698 408.2627 Cf*U*u1 D275.6069 417.2227 m271.8276 415.5625 270.1885 411.1606 270.1216 410.9727 C269.9556 410.5205 L270.418 410.3916 L270.5659 410.3506 274.0464 409.4155 278.3374 411.416 c282.6797 413.4355 283.6299 417.4077 283.6704 417.5786 C283.7705 418.0264 L283.3198 418.1147 L283.1602 418.1475 279.3394 418.8652 275.6069 417.2227 cf0 D275.9663 416.4058 m278.6958 417.6079 281.5361 417.4375 282.6499 417.3081 C282.2798 416.2686 281.0854 413.6758 277.9634 412.2227 c274.8823 410.791 272.2339 410.9868 271.1689 411.1528 C271.6797 412.2817 273.2109 415.1958 275.9663 416.4058 Cf*U*u1 D280.478 425.271 m276.6943 423.6509 274.8154 419.2896 274.7378 419.1089 C274.5347 418.6284 L275.041 418.502 L275.1851 418.4653 278.6543 417.6328 282.9595 419.5854 c287.3174 421.561 288.3013 425.3892 288.3428 425.5518 C288.4526 425.9995 L288.0015 426.0962 L287.8501 426.1289 284.2329 426.8726 280.478 425.271 cf0 D280.8291 424.4497 m283.5518 425.6113 286.2412 425.4336 287.3135 425.3008 C286.9287 424.2871 285.7085 421.8091 282.5898 420.396 c279.5425 419.0161 276.9121 419.1343 275.8101 419.2759 C276.3984 420.4253 278.085 423.2769 280.8291 424.4497 Cf*U*u1 D287.2212 433.3232 m283.4263 431.748 281.3105 427.4268 281.2217 427.2461 C280.9741 426.7354 L281.5244 426.6177 L281.6729 426.584 285.1313 425.8594 289.4478 427.7607 c293.8237 429.6909 294.8408 433.3755 294.8809 433.5308 C295 433.9746 L294.5522 434.0815 L294.4116 434.1152 290.9907 434.8877 287.2212 433.3232 cf0 D287.5615 432.4985 m290.2686 433.6226 292.8135 433.438 293.8491 433.2935 C293.4458 432.3101 292.2002 429.9502 289.0894 428.5781 c286.0518 427.2388 283.4517 427.2939 282.3242 427.4053 C283.001 428.5742 284.8281 431.3628 287.5615 432.4985 Cf*U*u1 D294.6523 441.0913 m290.8535 439.5601 288.4937 435.2803 288.394 435.0991 C288.105 434.5625 L288.7046 434.4478 L288.8486 434.4219 292.2998 433.7969 296.6235 435.6538 c301.0215 437.5405 302.0723 441.0796 302.1123 441.2271 C302.2388 441.6685 L301.7979 441.7822 L301.6616 441.8159 298.4399 442.6191 294.6523 441.0913 cf0 D294.9849 440.2661 m297.6743 441.3496 300.0737 441.1611 301.0728 441.0093 C300.6514 440.0518 299.3794 437.8027 296.2725 436.4751 c293.2646 435.1836 290.6909 435.1724 289.5332 435.2544 C290.291 436.4419 292.2632 439.1675 294.9849 440.2661 Cf*U*u1 D302.5859 448.4365 m298.7803 446.9458 296.1836 442.707 296.0757 442.5254 C295.7319 441.96 L296.3872 441.8569 L296.5317 441.8345 299.9712 441.3125 304.3057 443.1216 c308.7183 444.9604 309.8022 448.3516 309.8467 448.4956 C309.9805 448.9326 L309.5435 449.0542 L309.417 449.0913 306.396 449.9272 302.5859 448.4365 cf0 D302.9116 447.605 m305.5781 448.6475 307.8418 448.4546 308.8003 448.3003 C308.3599 447.3716 307.0615 445.2339 303.9619 443.9429 c300.999 442.707 298.4438 442.6255 297.249 442.6772 C298.0991 443.8838 300.2114 446.5464 302.9116 447.605 Cf*U*u1 D310.8418 455.2129 m307.0244 453.7627 304.1914 449.5649 304.0728 449.3867 C303.6733 448.7886 L304.3877 448.6953 L304.5317 448.6777 307.9609 448.2627 312.3062 450.0234 c316.7378 451.8179 317.855 455.061 317.8999 455.2012 C318.0391 455.6274 L317.6108 455.7642 L317.4922 455.8008 314.6704 456.667 310.8418 455.2129 cf0 D311.1602 454.3809 m313.8013 455.3828 315.9277 455.1875 316.8452 455.0244 C316.3862 454.1255 315.0586 452.0986 311.9736 450.8486 c309.0332 449.6606 306.5103 449.5205 305.2896 449.542 C306.2295 450.7593 308.4668 453.3594 311.1602 454.3809 Cf*U*u1 D319.2275 461.2866 m315.4028 459.877 312.332 455.7163 312.2026 455.5386 C311.7446 454.9102 L312.5176 454.8315 L312.6611 454.8174 316.083 454.5063 320.4404 456.2188 c324.8867 457.9644 326.0366 461.0645 326.085 461.1978 C326.2324 461.6191 L325.8115 461.7676 L325.7031 461.8076 323.0771 462.7036 319.2275 461.2866 cf0 D319.5337 460.4507 m322.1489 461.4121 324.147 461.2158 325.0229 461.0459 C324.5415 460.1802 323.1924 458.2568 320.1113 457.0479 c317.2114 455.9082 314.7212 455.7119 313.4712 455.7012 C314.4995 456.9297 316.8604 459.4629 319.5337 460.4507 Cf*UUu*u1 D260.9194 409.1362 m260.8076 408.9927 258.1895 405.5933 257.9189 401.502 c257.6489 397.3369 261.0557 394.1567 261.2036 394.0234 C261.5024 393.7456 L261.8066 394.0234 L261.9214 394.127 264.6177 396.6567 264.8252 401.436 c265.0356 406.248 261.6958 409.085 261.5547 409.2031 C261.2007 409.4995 L260.9194 409.1362 Lf0 D258.7993 401.0366 m258.7993 401.1733 258.8032 401.3066 258.811 401.4429 c259.0103 404.5054 260.6675 407.2061 261.333 408.1787 C262.1064 407.3838 263.9448 405.1494 263.9448 401.8574 c263.9448 401.7314 263.9409 401.6021 263.9331 401.4731 c263.7817 397.9624 262.1616 395.7617 261.4956 394.9995 C260.7412 395.8062 258.7993 398.1587 258.7993 401.0366 Cf*U*u1 D266.2339 418.3032 m266.1455 418.2021 264.0151 415.854 263.105 412.4761 c262.9829 412.019 262.8862 411.5264 262.8271 411.02 c262.3359 406.9805 265.2534 403.6704 265.3799 403.5298 C265.668 403.208 L266.001 403.4888 L266.1157 403.5884 268.8706 405.978 269.4302 410.6162 c269.9922 415.3071 266.9966 418.2021 266.8701 418.3247 C266.541 418.6357 L266.2339 418.3032 Lf0 D263.6636 410.1094 m263.6636 410.3726 263.6782 410.6421 263.7114 410.9126 c263.7666 411.3789 263.8525 411.8257 263.9663 412.2432 c264.6177 414.6636 265.9678 416.5527 266.5747 417.3188 C267.2139 416.5566 268.6084 414.5776 268.6084 411.7554 c268.6084 411.4229 268.5859 411.0791 268.5454 410.7236 c268.1387 407.3428 266.4556 405.2456 265.75 404.4946 C265.1206 405.3267 263.6636 407.5205 263.6636 410.1094 Cf*U*u1 D272.1929 426.8984 m272.0972 426.8101 269.8623 424.7271 268.7266 421.3726 c268.583 420.9473 268.4648 420.4849 268.3721 419.9634 c267.6616 416.0571 270.0913 412.6206 270.1958 412.4727 C270.4653 412.0957 L270.832 412.3843 L270.9497 412.4761 273.7651 414.7251 274.6714 419.2266 c275.5884 423.7881 272.936 426.7466 272.8218 426.8687 C272.522 427.2012 L272.1929 426.8984 Lf0 D269.1377 418.5244 m269.1377 418.9419 269.1704 419.3755 269.2524 419.8086 c269.3364 420.2847 269.4409 420.7031 269.5708 421.0879 c270.3765 423.4697 271.8086 425.1934 272.4556 425.8926 C272.9658 425.1714 273.9683 423.4546 273.9683 421.0947 c273.9683 420.562 273.916 419.9966 273.7944 419.4014 c273.1436 416.1572 271.4009 414.1636 270.647 413.4238 C270.1509 414.2642 269.1377 416.2456 269.1377 418.5244 Cf*U*u1 D278.7437 434.9326 m278.6436 434.855 276.3062 433.0381 274.937 429.71 c274.7744 429.3179 274.6377 428.8735 274.5083 428.3516 c273.5908 424.5752 275.5181 421.0171 275.5996 420.8652 C275.8433 420.4253 L276.251 420.7217 L276.3726 420.8066 279.2432 422.915 280.4966 427.2759 c281.769 431.7036 279.4644 434.7251 279.3647 434.8506 C279.0942 435.1992 L278.7437 434.9326 Lf0 D275.1597 426.251 m275.1597 426.8652 275.2222 427.5054 275.3774 428.1411 c275.4922 428.6187 275.6187 429.022 275.7622 429.373 c276.7241 431.7104 278.229 433.271 278.9175 433.9038 C279.2983 433.2534 279.979 431.8252 279.979 429.895 c279.979 429.1704 279.8833 428.3706 279.6382 427.5234 c278.7466 424.4209 276.9536 422.5264 276.147 421.7939 C275.792 422.6006 275.1597 424.3018 275.1597 426.251 Cf*U*u1 D285.8379 442.4116 m285.7339 442.3486 283.3042 440.7988 281.6919 437.4956 c281.5107 437.1226 281.3472 436.708 281.1885 436.1899 c280.0566 432.543 281.4883 428.8657 281.5513 428.7109 C281.7544 428.2041 L282.2134 428.5039 L282.3345 428.5884 285.2607 430.5562 286.8584 434.7729 c288.4863 439.0674 286.5332 442.1489 286.4482 442.2778 C286.207 442.6445 L285.8379 442.4116 Lf0 D281.6504 433.2056 m281.6504 434.0747 281.7544 435.0063 282.0396 435.9233 c282.1875 436.397 282.3306 436.7749 282.4902 437.1035 c283.6187 439.4077 285.1982 440.8135 285.9189 441.376 C286.1934 440.8101 286.6108 439.6968 286.6108 438.1914 c286.6108 437.2808 286.459 436.2344 286.022 435.0918 c284.9058 432.1357 283.0562 430.335 282.1909 429.6138 C281.9766 430.335 281.6504 431.6626 281.6504 433.2056 Cf*U*u1 D293.4312 449.3467 m293.3237 449.2944 290.8057 448.0112 288.9409 444.7344 c288.7417 444.3828 288.5566 443.9839 288.3638 443.4839 c287.0176 439.9697 287.9648 436.1792 288.0054 436.02 C288.1533 435.4395 L288.668 435.7495 L288.7935 435.8232 291.7739 437.6548 293.7124 441.731 c295.6919 445.8887 294.0933 449.0254 294.0229 449.1538 C293.8203 449.542 L293.4312 449.3467 Lf0 D288.5415 439.2822 m288.5415 440.4624 288.6934 441.8491 289.1958 443.1655 c289.3735 443.6211 289.5366 443.9795 289.7183 444.2944 c291.0049 446.5571 292.6509 447.8081 293.4131 448.3003 C293.5796 447.834 293.8091 447.0273 293.8091 445.9175 c293.8091 444.8599 293.5977 443.5576 292.9097 442.1157 c291.563 439.2861 289.6553 437.5952 288.7417 436.8931 C288.6489 437.4399 288.5415 438.2842 288.5415 439.2822 Cf*U*u1 D301.4917 455.7456 m301.3804 455.7012 298.7837 454.6807 296.6567 451.4438 c296.4351 451.104 296.2236 450.7114 296.0059 450.2456 c294.4492 446.8647 294.9077 442.959 294.9287 442.7959 C295.0073 442.145 L295.584 442.4595 L295.7144 442.5298 298.7466 444.2207 301.0327 448.1558 c303.3589 452.1724 302.1167 455.3608 302.0645 455.4946 C301.8979 455.9004 L301.4917 455.7456 Lf0 D295.7471 444.3306 m295.7471 445.7261 295.917 447.9224 296.8159 449.8716 c297.0156 450.3008 297.208 450.6519 297.4038 450.9517 c298.8613 453.1753 300.5737 454.2778 301.3652 454.6987 C301.4502 454.3433 301.5396 453.8154 301.5396 453.1162 c301.5396 451.9434 301.2764 450.356 300.2593 448.603 c298.6948 445.9028 296.7344 444.3164 295.7622 443.6362 C295.7544 443.8389 295.7471 444.0645 295.7471 444.3306 Cf*U*u1 D309.9805 461.6152 m309.8691 461.5825 307.1948 460.8203 304.8047 457.6211 c304.5542 457.2876 304.3174 456.9106 304.0806 456.4824 c302.3052 453.2344 302.2866 449.2134 302.2866 449.043 C302.2905 448.3296 L302.9307 448.6436 L303.064 448.7104 306.1519 450.2637 308.7744 454.0586 c311.4517 457.9312 310.5674 461.1719 310.5269 461.3052 C310.4053 461.7305 L309.9805 461.6152 Lf0 D304.8643 456.0522 m305.0781 456.4482 305.2939 456.7852 305.519 457.0884 c307.147 459.2671 308.9292 460.2251 309.751 460.5757 C309.7764 460.3687 309.7988 460.1182 309.7988 459.7959 c309.7988 458.6011 309.5063 456.6851 308.0415 454.5659 c306.2622 451.9946 304.2466 450.5044 303.2188 449.8491 C303.3145 451.1553 303.6475 453.833 304.8643 456.0522 Cf*U*u1 D318.8237 466.9609 m318.7085 466.9419 315.9683 466.4316 313.3052 463.2842 c310.6567 460.1582 310.0352 454.9907 310.0093 454.7729 C309.9209 453.9995 L310.6304 454.3145 L310.7642 454.3735 313.9116 455.79 316.8745 459.4482 c319.8926 463.1763 319.3638 466.4614 319.3418 466.5977 C319.2637 467.0381 L318.8237 466.9609 Lf0 D313.9858 462.707 m315.7905 464.8408 317.6401 465.6577 318.4907 465.9438 C318.4946 465.9214 318.4946 465.9097 318.4946 465.8843 c318.4946 464.8564 318.2285 462.5371 316.1787 460.0068 c314.1968 457.5581 312.1143 456.1636 311.0337 455.5386 C311.3228 457.125 312.1323 460.5205 313.9858 462.707 Cf*UUU*u1 D234.1392 422.7266 m234.1392 401.1582 245.813 380.4082 264.606 368.5679 C265.3833 368.0796 L265.9419 368.8091 L266.1011 369.0161 266.1646 369.2119 266.1646 369.3926 c266.1646 369.856 265.7681 370.2183 265.5459 370.4243 C264.4585 371.4683 L260.5859 375.8657 259.5469 380.0381 259.5469 383.2451 c259.5469 386.792 260.8149 389.1597 260.9194 389.3403 C261.2661 389.9658 L260.7896 390.502 L252.8477 399.3613 248.6538 410.502 248.6538 422.7266 c248.6538 449.624 270.5356 471.5063 297.4341 471.5063 c304.9121 471.5063 312.0879 469.8604 318.7612 466.6128 C319.4517 466.2764 L329.2583 477.4614 L328.1704 478.0684 L318.8237 483.2725 308.1938 486.0205 297.4341 486.0205 c262.5317 486.0205 234.1392 457.6245 234.1392 422.7266 cf0 D236.1514 422.7266 m236.1514 456.5151 263.6411 484.0083 297.4341 484.0083 c307.4316 484.0083 317.3003 481.5303 326.0732 476.8843 C324.79 475.4199 319.7153 469.6309 318.9351 468.7437 C312.188 471.9019 304.9609 473.519 297.4341 473.519 c269.4258 473.519 246.6377 450.7339 246.6377 422.7266 c246.6377 410.231 250.8765 398.8325 258.8628 389.6812 C258.4038 388.6196 257.5864 386.293 257.5864 383.2119 c257.5864 380.6631 258.1782 377.6045 259.9722 374.3535 C245.1431 386.1675 236.1514 404.1284 236.1514 422.7266 Cf*U319.6367 468.4219 m312.688 471.8062 305.2192 473.519 297.4341 473.519 c269.4258 473.519 246.6377 450.7339 246.6377 422.7266 c246.6377 409.998 251.0137 398.3916 259.291 389.1597 C260.1606 388.1904 L264.0225 394.0273 L263.8169 394.2671 L263.4707 394.3057 263.1851 394.3564 262.978 394.4019 C263.0317 394.562 263.1064 394.7695 263.1992 395.0034 C262.896 395.3647 262.5913 395.7266 262.3022 396.0957 C261.9902 395.6001 261.6987 395.2319 261.4956 394.9995 C260.7412 395.8062 258.7993 398.1587 258.7993 401.0366 c258.7993 401.1294 258.8032 401.2207 258.8076 401.312 C255.1943 407.6729 253.3618 414.8423 253.3618 422.7266 c253.3618 447.0273 273.1323 466.7979 297.4341 466.7979 c303.3999 466.7979 309.1519 465.6367 314.564 463.3423 C315.1431 463.9419 315.7158 464.415 316.2476 464.7842 C310.3223 467.4419 304.0063 468.8096 297.4341 468.8096 c272.0225 468.8096 251.3467 448.1372 251.3467 422.7266 c251.3467 411.7075 254.7856 402.02 261.5215 393.8975 C261.1294 393.3018 260.582 392.4731 259.9536 391.5269 C252.5781 400.2158 248.6538 410.9565 248.6538 422.7266 c248.6538 449.624 270.5356 471.5063 297.4341 471.5063 c304.5796 471.5063 311.4409 469.9863 317.8584 467.0195 C317.5903 466.438 317.3276 465.8682 317.064 465.2974 C317.6528 465.6299 318.1523 465.8296 318.4907 465.9438 C318.4946 465.9214 318.4946 465.9097 318.4946 465.8843 c318.4946 465.1343 318.3486 463.6973 317.478 461.9927 C317.7065 461.8813 L320.5254 467.9922 L319.6367 468.4219 Lfu0 XR319.186 478.3779 m314.3296 472.2368 L314.7749 472.084 315.2183 471.9253 315.6592 471.7607 C320.479 477.8574 L320.0508 478.0366 319.6196 478.209 319.186 478.3779 Cf309.6807 481.207 m306.8506 474.1953 L307.2969 474.1133 307.7417 474.0264 308.186 473.9331 C311.0054 480.9165 L310.5654 481.02 310.1235 481.1138 309.6807 481.207 Cf298.3765 482.4707 m297.6802 475.0386 L298.1284 475.0366 298.5757 475.0298 299.0215 475.0161 C299.7163 482.4351 L299.27 482.4517 298.8232 482.4639 298.3765 482.4707 Cf287.3608 481.6309 m288.7725 474.3213 L289.2124 474.3945 289.6528 474.4629 290.0957 474.5249 C288.6821 481.8413 L288.2397 481.7764 287.7993 481.7056 287.3608 481.6309 Cf276.6714 478.7627 m280.0132 472.0562 L280.437 472.2061 280.8638 472.3516 281.2925 472.4902 C277.9409 479.2168 L277.5151 479.0698 277.0923 478.9185 276.6714 478.7627 Cf266.5322 473.8579 m271.521 468.1611 L271.9165 468.3877 272.3154 468.6079 272.7173 468.8247 C267.7021 474.5508 L267.3091 474.3237 266.9199 474.0933 266.5322 473.8579 Cf257.3198 466.9839 m263.6167 462.6094 L263.9702 462.9092 264.3281 463.2046 264.6885 463.4951 C258.3501 467.8975 L258.0034 467.5972 257.6602 467.2925 257.3198 466.9839 Cf249.4824 458.3516 m256.7173 455.5361 L257.0127 455.9023 257.313 456.2637 257.6172 456.6211 C250.3271 459.4585 L250.042 459.0923 249.7603 458.7241 249.4824 458.3516 Cf243.4302 448.3013 m251.2153 447.2163 L251.4399 447.6372 251.6694 448.0557 251.9038 448.4702 C244.0498 449.5649 L243.8379 449.1465 243.6313 448.7256 243.4302 448.3013 Cf239.4663 437.2744 m247.4038 438.0337 L247.5469 438.4985 247.6943 438.9614 247.8491 439.4204 C239.8311 438.6538 L239.7041 438.1958 239.5825 437.7363 239.4663 437.2744 Cf237.7471 425.7251 m245.4253 428.3936 L245.479 428.8892 245.54 429.3823 245.6074 429.874 C237.8369 427.1724 L237.8018 426.6909 237.771 426.2085 237.7471 425.7251 Cf238.3418 414.061 m245.2783 418.6157 L245.2397 419.126 245.2046 419.6367 245.1812 420.1509 C238.1353 415.5239 L238.1982 415.0352 238.2666 414.5483 238.3418 414.061 Cf241.2993 402.6475 m246.9307 408.8486 L246.7905 409.3652 246.6655 409.8872 246.5415 410.4092 C240.793 404.0786 L240.9556 403.5991 241.124 403.1226 241.2993 402.6475 Cf246.5962 391.7402 m250.5796 399.3179 L250.3306 399.8105 250.082 400.3037 249.8496 400.8047 C245.7935 393.0869 L246.0552 392.6343 246.3228 392.1855 246.5962 391.7402 Cf253.3823 382.6509 m255.5112 391.4312 L255.1592 391.895 254.813 392.3633 254.4771 392.8369 C252.3057 383.8794 L252.6592 383.4663 253.0186 383.0566 253.3823 382.6509 CfU318.1904 461.4404 m318.3745 461.3184 318.5571 461.1978 318.7354 461.0767 C318.8989 461.1489 319.0601 461.2256 319.2275 461.2866 c319.4233 461.3594 319.6152 461.4209 319.8057 461.4824 C319.3936 461.7534 319.0078 462.0576 318.6401 462.3799 C318.5132 462.0757 318.3618 461.7627 318.1904 461.4404 CfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF